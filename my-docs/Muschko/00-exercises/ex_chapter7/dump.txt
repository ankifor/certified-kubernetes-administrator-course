{
    "kind": "NodeList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "6985"
    },
    "items": [
        {
            "metadata": {
                "name": "minikube",
                "uid": "fed7ce0a-cb7c-4dcf-9810-bc0ab8181a2d",
                "resourceVersion": "6800",
                "creationTimestamp": "2024-05-09T20:38:45Z",
                "labels": {
                    "beta.kubernetes.io/arch": "amd64",
                    "beta.kubernetes.io/os": "linux",
                    "kubernetes.io/arch": "amd64",
                    "kubernetes.io/hostname": "minikube",
                    "kubernetes.io/os": "linux",
                    "minikube.k8s.io/commit": "8220a6eb95f0a4d75f7f2d7b14cef975f050512d",
                    "minikube.k8s.io/name": "minikube",
                    "minikube.k8s.io/primary": "true",
                    "minikube.k8s.io/updated_at": "2024_05_09T22_38_49_0700",
                    "minikube.k8s.io/version": "v1.32.0",
                    "node-role.kubernetes.io/control-plane": "",
                    "node.kubernetes.io/exclude-from-external-load-balancers": ""
                },
                "annotations": {
                    "kubeadm.alpha.kubernetes.io/cri-socket": "unix:///var/run/cri-dockerd.sock",
                    "node.alpha.kubernetes.io/ttl": "0",
                    "volumes.kubernetes.io/controller-managed-attach-detach": "true"
                }
            },
            "spec": {
                "podCIDR": "10.244.0.0/24",
                "podCIDRs": [
                    "10.244.0.0/24"
                ]
            },
            "status": {
                "capacity": {
                    "cpu": "12",
                    "ephemeral-storage": "383374872Ki",
                    "hugepages-1Gi": "0",
                    "hugepages-2Mi": "0",
                    "memory": "32782020Ki",
                    "pods": "110"
                },
                "allocatable": {
                    "cpu": "12",
                    "ephemeral-storage": "383374872Ki",
                    "hugepages-1Gi": "0",
                    "hugepages-2Mi": "0",
                    "memory": "32782020Ki",
                    "pods": "110"
                },
                "conditions": [
                    {
                        "type": "MemoryPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2024-05-09T22:50:28Z",
                        "lastTransitionTime": "2024-05-09T20:38:45Z",
                        "reason": "KubeletHasSufficientMemory",
                        "message": "kubelet has sufficient memory available"
                    },
                    {
                        "type": "DiskPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2024-05-09T22:50:28Z",
                        "lastTransitionTime": "2024-05-09T20:38:45Z",
                        "reason": "KubeletHasNoDiskPressure",
                        "message": "kubelet has no disk pressure"
                    },
                    {
                        "type": "PIDPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2024-05-09T22:50:28Z",
                        "lastTransitionTime": "2024-05-09T20:38:45Z",
                        "reason": "KubeletHasSufficientPID",
                        "message": "kubelet has sufficient PID available"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastHeartbeatTime": "2024-05-09T22:50:28Z",
                        "lastTransitionTime": "2024-05-09T20:38:46Z",
                        "reason": "KubeletReady",
                        "message": "kubelet is posting ready status"
                    }
                ],
                "addresses": [
                    {
                        "type": "InternalIP",
                        "address": "192.168.49.2"
                    },
                    {
                        "type": "Hostname",
                        "address": "minikube"
                    }
                ],
                "daemonEndpoints": {
                    "kubeletEndpoint": {
                        "Port": 10250
                    }
                },
                "nodeInfo": {
                    "machineID": "d35dc64c0d234172ae35dd2c367203ed",
                    "systemUUID": "c5107647-e08b-45cc-a811-e4b277f9c92d",
                    "bootID": "52b0617e-a776-4bd1-ac2d-5dbf4cad4afe",
                    "kernelVersion": "6.1.0-20-amd64",
                    "osImage": "Ubuntu 22.04.3 LTS",
                    "containerRuntimeVersion": "docker://24.0.7",
                    "kubeletVersion": "v1.28.3",
                    "kubeProxyVersion": "v1.28.3",
                    "operatingSystem": "linux",
                    "architecture": "amd64"
                },
                "images": [
                    {
                        "names": [
                            "registry.k8s.io/etcd@sha256:e013d0d5e4e25d00c61a7ff839927a1f36479678f11e49502b53a5e0b14f10c3",
                            "registry.k8s.io/etcd:3.5.9-0"
                        ],
                        "sizeBytes": 294018614
                    },
                    {
                        "names": [
                            "registry.k8s.io/kube-apiserver@sha256:8db46adefb0f251da210504e2ce268c36a5a7c630667418ea4601f63c9057a2d",
                            "registry.k8s.io/kube-apiserver:v1.28.3"
                        ],
                        "sizeBytes": 125740879
                    },
                    {
                        "names": [
                            "registry.k8s.io/kube-controller-manager@sha256:640661231facded984f698e79315bceb5391b04e5159662e940e6e5ab2098707",
                            "registry.k8s.io/kube-controller-manager:v1.28.3"
                        ],
                        "sizeBytes": 121764215
                    },
                    {
                        "names": [
                            "registry.k8s.io/kube-proxy@sha256:73a9f275e1fa5f0b9ae744914764847c2c4fdc66e9e528d67dea70007f9a6072",
                            "registry.k8s.io/kube-proxy:v1.28.3"
                        ],
                        "sizeBytes": 73100828
                    },
                    {
                        "names": [
                            "registry.k8s.io/metrics-server/metrics-server@sha256:ee4304963fb035239bb5c5e8c10f2f38ee80efc16ecbdb9feb7213c17ae2e86e"
                        ],
                        "sizeBytes": 68910842
                    },
                    {
                        "names": [
                            "registry.k8s.io/kube-scheduler@sha256:2cfaab2fe5e5937bc37f3d05f3eb7a4912a981ab8375f1d9c2c3190b259d1725",
                            "registry.k8s.io/kube-scheduler:v1.28.3"
                        ],
                        "sizeBytes": 60074461
                    },
                    {
                        "names": [
                            "registry.k8s.io/coredns/coredns@sha256:a0ead06651cf580044aeb0a0feba63591858fb2e43ade8c9dea45a6a89ae7e5e",
                            "registry.k8s.io/coredns/coredns:v1.10.1"
                        ],
                        "sizeBytes": 53612153
                    },
                    {
                        "names": [
                            "gcr.io/k8s-minikube/storage-provisioner@sha256:18eb69d1418e854ad5a19e399310e52808a8321e4c441c1dddad8977a0d7a944",
                            "gcr.io/k8s-minikube/storage-provisioner:v5"
                        ],
                        "sizeBytes": 31465472
                    },
                    {
                        "names": [
                            "busybox@sha256:141c253bc4c3fd0a201d32dc1f493bcf3fff003b6df416dea4f41046e0f37d47",
                            "busybox:1.28"
                        ],
                        "sizeBytes": 1146369
                    },
                    {
                        "names": [
                            "registry.k8s.io/pause@sha256:7031c1b283388d2c2e09b57badb803c05ebed362dc88d84b480cc47f72a21097",
                            "registry.k8s.io/pause:3.9"
                        ],
                        "sizeBytes": 743952
                    }
                ]
            }
        }
    ]
}
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "6985"
    },
    "items": [
        {
            "metadata": {
                "name": "metrics-server-7c66d45ddc-d69gs.17cdf20e8ba8dc3c",
                "namespace": "kube-system",
                "uid": "bf59d42f-9307-4c7f-90c9-6fc71b1c79e0",
                "resourceVersion": "5280",
                "creationTimestamp": "2024-05-09T22:19:37Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "metrics-server-7c66d45ddc-d69gs",
                "uid": "314bdb98-7392-4028-812e-f6d3037fa04c",
                "apiVersion": "v1",
                "resourceVersion": "5272"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/metrics-server-7c66d45ddc-d69gs to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2024-05-09T22:19:37Z",
            "lastTimestamp": "2024-05-09T22:19:37Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "default-scheduler",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "metrics-server-7c66d45ddc-d69gs.17cdf20ea79d6e5b",
                "namespace": "kube-system",
                "uid": "1067941a-2e0c-4dcf-89ec-1549d109653b",
                "resourceVersion": "5292",
                "creationTimestamp": "2024-05-09T22:19:37Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "metrics-server-7c66d45ddc-d69gs",
                "uid": "314bdb98-7392-4028-812e-f6d3037fa04c",
                "apiVersion": "v1",
                "resourceVersion": "5278",
                "fieldPath": "spec.containers{metrics-server}"
            },
            "reason": "Pulling",
            "message": "Pulling image \"registry.k8s.io/metrics-server/metrics-server:v0.6.4@sha256:ee4304963fb035239bb5c5e8c10f2f38ee80efc16ecbdb9feb7213c17ae2e86e\"",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2024-05-09T22:19:37Z",
            "lastTimestamp": "2024-05-09T22:19:37Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "kubelet",
            "reportingInstance": "minikube"
        },
        {
            "metadata": {
                "name": "metrics-server-7c66d45ddc-d69gs.17cdf20f64a37149",
                "namespace": "kube-system",
                "uid": "1b365a19-b764-4daa-9ea2-ddbfb4d6a159",
                "resourceVersion": "5295",
                "creationTimestamp": "2024-05-09T22:19:41Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "metrics-server-7c66d45ddc-d69gs",
                "uid": "314bdb98-7392-4028-812e-f6d3037fa04c",
                "apiVersion": "v1",
                "resourceVersion": "5278",
                "fieldPath": "spec.containers{metrics-server}"
            },
            "reason": "Pulled",
            "message": "Successfully pulled image \"registry.k8s.io/metrics-server/metrics-server:v0.6.4@sha256:ee4304963fb035239bb5c5e8c10f2f38ee80efc16ecbdb9feb7213c17ae2e86e\" in 3.171s (3.171s including waiting)",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2024-05-09T22:19:41Z",
            "lastTimestamp": "2024-05-09T22:19:41Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "kubelet",
            "reportingInstance": "minikube"
        },
        {
            "metadata": {
                "name": "metrics-server-7c66d45ddc-d69gs.17cdf20f678a37c5",
                "namespace": "kube-system",
                "uid": "4ca5c294-b192-4d47-bea0-6922c29bded6",
                "resourceVersion": "5296",
                "creationTimestamp": "2024-05-09T22:19:41Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "metrics-server-7c66d45ddc-d69gs",
                "uid": "314bdb98-7392-4028-812e-f6d3037fa04c",
                "apiVersion": "v1",
                "resourceVersion": "5278",
                "fieldPath": "spec.containers{metrics-server}"
            },
            "reason": "Created",
            "message": "Created container metrics-server",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2024-05-09T22:19:41Z",
            "lastTimestamp": "2024-05-09T22:19:41Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "kubelet",
            "reportingInstance": "minikube"
        },
        {
            "metadata": {
                "name": "metrics-server-7c66d45ddc-d69gs.17cdf20f6b8335a9",
                "namespace": "kube-system",
                "uid": "b9c6b11f-03ad-4354-ad15-bdf7183b8629",
                "resourceVersion": "5297",
                "creationTimestamp": "2024-05-09T22:19:41Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "metrics-server-7c66d45ddc-d69gs",
                "uid": "314bdb98-7392-4028-812e-f6d3037fa04c",
                "apiVersion": "v1",
                "resourceVersion": "5278",
                "fieldPath": "spec.containers{metrics-server}"
            },
            "reason": "Started",
            "message": "Started container metrics-server",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2024-05-09T22:19:41Z",
            "lastTimestamp": "2024-05-09T22:19:41Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "kubelet",
            "reportingInstance": "minikube"
        },
        {
            "metadata": {
                "name": "metrics-server-7c66d45ddc-d69gs.17cdf20f728d65b6",
                "namespace": "kube-system",
                "uid": "6620822b-4030-4e07-a21c-cdc5f0cb87f1",
                "resourceVersion": "5298",
                "creationTimestamp": "2024-05-09T22:19:41Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "metrics-server-7c66d45ddc-d69gs",
                "uid": "314bdb98-7392-4028-812e-f6d3037fa04c",
                "apiVersion": "v1",
                "resourceVersion": "5278",
                "fieldPath": "spec.containers{metrics-server}"
            },
            "reason": "Unhealthy",
            "message": "Readiness probe failed: Get \"https://10.244.0.4:4443/readyz\": dial tcp 10.244.0.4:4443: connect: connection refused",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2024-05-09T22:19:41Z",
            "lastTimestamp": "2024-05-09T22:19:41Z",
            "count": 1,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "kubelet",
            "reportingInstance": "minikube"
        },
        {
            "metadata": {
                "name": "metrics-server-7c66d45ddc-d69gs.17cdf20fae7d65eb",
                "namespace": "kube-system",
                "uid": "2b4eb6b9-9153-4ddd-8a3a-846fbbc699eb",
                "resourceVersion": "5354",
                "creationTimestamp": "2024-05-09T22:19:42Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "metrics-server-7c66d45ddc-d69gs",
                "uid": "314bdb98-7392-4028-812e-f6d3037fa04c",
                "apiVersion": "v1",
                "resourceVersion": "5278",
                "fieldPath": "spec.containers{metrics-server}"
            },
            "reason": "Unhealthy",
            "message": "Readiness probe failed: HTTP probe failed with statuscode: 500",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2024-05-09T22:19:42Z",
            "lastTimestamp": "2024-05-09T22:20:37Z",
            "count": 7,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "kubelet",
            "reportingInstance": "minikube"
        },
        {
            "metadata": {
                "name": "metrics-server-7c66d45ddc.17cdf20e8b62ef4c",
                "namespace": "kube-system",
                "uid": "714dc0d7-10e7-4eab-8433-e16cc6adbbf9",
                "resourceVersion": "5276",
                "creationTimestamp": "2024-05-09T22:19:37Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "metrics-server-7c66d45ddc",
                "uid": "14fea236-aecb-4ce6-b527-c190887cf71a",
                "apiVersion": "apps/v1",
                "resourceVersion": "5265"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: metrics-server-7c66d45ddc-d69gs",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2024-05-09T22:19:37Z",
            "lastTimestamp": "2024-05-09T22:19:37Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "replicaset-controller",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "metrics-server.17cdf20e8a9a43a0",
                "namespace": "kube-system",
                "uid": "44371b8a-28d0-48d0-8b76-7b255a70e8e7",
                "resourceVersion": "5266",
                "creationTimestamp": "2024-05-09T22:19:37Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "kube-system",
                "name": "metrics-server",
                "uid": "1ea2a978-9dee-4823-9e3c-a3bc69f22d0a",
                "apiVersion": "apps/v1",
                "resourceVersion": "5262"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set metrics-server-7c66d45ddc to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2024-05-09T22:19:37Z",
            "lastTimestamp": "2024-05-09T22:19:37Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "deployment-controller",
            "reportingInstance": ""
        }
    ]
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "6985"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "6985"
    },
    "items": [
        {
            "metadata": {
                "name": "kube-dns",
                "namespace": "kube-system",
                "uid": "d8ced0df-8fef-4942-b54d-e14663023fb3",
                "resourceVersion": "274",
                "creationTimestamp": "2024-05-09T20:38:48Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "CoreDNS"
                },
                "annotations": {
                    "prometheus.io/port": "9153",
                    "prometheus.io/scrape": "true"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "dns",
                        "protocol": "UDP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "dns-tcp",
                        "protocol": "TCP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "metrics",
                        "protocol": "TCP",
                        "port": 9153,
                        "targetPort": 9153
                    }
                ],
                "selector": {
                    "k8s-app": "kube-dns"
                },
                "clusterIP": "10.96.0.10",
                "clusterIPs": [
                    "10.96.0.10"
                ],
                "type": "ClusterIP",
                "sessionAffinity": "None",
                "ipFamilies": [
                    "IPv4"
                ],
                "ipFamilyPolicy": "SingleStack",
                "internalTrafficPolicy": "Cluster"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "metadata": {
                "name": "metrics-server",
                "namespace": "kube-system",
                "uid": "4ee83985-c973-498e-8800-efc3638a1b31",
                "resourceVersion": "5285",
                "creationTimestamp": "2024-05-09T22:19:37Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "metrics-server",
                    "kubernetes.io/minikube-addons": "metrics-server",
                    "kubernetes.io/minikube-addons-endpoint": "metrics-server",
                    "kubernetes.io/name": "Metrics-server"
                },
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"metrics-server\",\"kubernetes.io/minikube-addons\":\"metrics-server\",\"kubernetes.io/minikube-addons-endpoint\":\"metrics-server\",\"kubernetes.io/name\":\"Metrics-server\"},\"name\":\"metrics-server\",\"namespace\":\"kube-system\"},\"spec\":{\"ports\":[{\"name\":\"https\",\"port\":443,\"protocol\":\"TCP\",\"targetPort\":\"https\"}],\"selector\":{\"k8s-app\":\"metrics-server\"}}}\n"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "https",
                        "protocol": "TCP",
                        "port": 443,
                        "targetPort": "https"
                    }
                ],
                "selector": {
                    "k8s-app": "metrics-server"
                },
                "clusterIP": "10.107.177.154",
                "clusterIPs": [
                    "10.107.177.154"
                ],
                "type": "ClusterIP",
                "sessionAffinity": "None",
                "ipFamilies": [
                    "IPv4"
                ],
                "ipFamilyPolicy": "SingleStack",
                "internalTrafficPolicy": "Cluster"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "6985"
    },
    "items": [
        {
            "metadata": {
                "name": "kube-proxy",
                "namespace": "kube-system",
                "uid": "7bb922f4-1b76-4760-9632-b4d6a93cc30f",
                "resourceVersion": "397",
                "generation": 1,
                "creationTimestamp": "2024-05-09T20:38:48Z",
                "labels": {
                    "k8s-app": "kube-proxy"
                },
                "annotations": {
                    "deprecated.daemonset.template.generation": "1"
                }
            },
            "spec": {
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-proxy"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-proxy"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "kube-proxy",
                                "configMap": {
                                    "name": "kube-proxy",
                                    "defaultMode": 420
                                }
                            },
                            {
                                "name": "xtables-lock",
                                "hostPath": {
                                    "path": "/run/xtables.lock",
                                    "type": "FileOrCreate"
                                }
                            },
                            {
                                "name": "lib-modules",
                                "hostPath": {
                                    "path": "/lib/modules",
                                    "type": ""
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "kube-proxy",
                                "image": "registry.k8s.io/kube-proxy:v1.28.3",
                                "command": [
                                    "/usr/local/bin/kube-proxy",
                                    "--config=/var/lib/kube-proxy/config.conf",
                                    "--hostname-override=$(NODE_NAME)"
                                ],
                                "env": [
                                    {
                                        "name": "NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "kube-proxy",
                                        "mountPath": "/var/lib/kube-proxy"
                                    },
                                    {
                                        "name": "xtables-lock",
                                        "mountPath": "/run/xtables.lock"
                                    },
                                    {
                                        "name": "lib-modules",
                                        "readOnly": true,
                                        "mountPath": "/lib/modules"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "privileged": true
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "kube-proxy",
                        "serviceAccount": "kube-proxy",
                        "hostNetwork": true,
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-node-critical"
                    }
                },
                "updateStrategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1,
                        "maxSurge": 0
                    }
                },
                "revisionHistoryLimit": 10
            },
            "status": {
                "currentNumberScheduled": 1,
                "numberMisscheduled": 0,
                "desiredNumberScheduled": 1,
                "numberReady": 1,
                "observedGeneration": 1,
                "updatedNumberScheduled": 1,
                "numberAvailable": 1
            }
        }
    ]
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "6985"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns",
                "namespace": "kube-system",
                "uid": "7f032ee2-2fb2-4e06-9892-c6b6294d2f3c",
                "resourceVersion": "402",
                "generation": 2,
                "creationTimestamp": "2024-05-09T20:38:48Z",
                "labels": {
                    "k8s-app": "kube-dns"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "config-volume",
                                "configMap": {
                                    "name": "coredns",
                                    "items": [
                                        {
                                            "key": "Corefile",
                                            "path": "Corefile"
                                        }
                                    ],
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "coredns",
                                "image": "registry.k8s.io/coredns/coredns:v1.10.1",
                                "args": [
                                    "-conf",
                                    "/etc/coredns/Corefile"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 9153,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "config-volume",
                                        "readOnly": true,
                                        "mountPath": "/etc/coredns"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/ready",
                                        "port": 8181,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "all"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "coredns",
                        "serviceAccount": "coredns",
                        "securityContext": {},
                        "affinity": {
                            "podAntiAffinity": {
                                "preferredDuringSchedulingIgnoredDuringExecution": [
                                    {
                                        "weight": 100,
                                        "podAffinityTerm": {
                                            "labelSelector": {
                                                "matchExpressions": [
                                                    {
                                                        "key": "k8s-app",
                                                        "operator": "In",
                                                        "values": [
                                                            "kube-dns"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "topologyKey": "kubernetes.io/hostname"
                                        }
                                    }
                                ]
                            }
                        },
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "key": "node-role.kubernetes.io/control-plane",
                                "effect": "NoSchedule"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1,
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 2,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2024-05-09T20:39:01Z",
                        "lastTransitionTime": "2024-05-09T20:39:01Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2024-05-09T20:39:03Z",
                        "lastTransitionTime": "2024-05-09T20:39:01Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"coredns-5dd5756b68\" has successfully progressed."
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "metrics-server",
                "namespace": "kube-system",
                "uid": "1ea2a978-9dee-4823-9e3c-a3bc69f22d0a",
                "resourceVersion": "5368",
                "generation": 1,
                "creationTimestamp": "2024-05-09T22:19:37Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "metrics-server",
                    "kubernetes.io/minikube-addons": "metrics-server"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"metrics-server\",\"kubernetes.io/minikube-addons\":\"metrics-server\"},\"name\":\"metrics-server\",\"namespace\":\"kube-system\"},\"spec\":{\"selector\":{\"matchLabels\":{\"k8s-app\":\"metrics-server\"}},\"strategy\":{\"rollingUpdate\":{\"maxUnavailable\":0}},\"template\":{\"metadata\":{\"labels\":{\"k8s-app\":\"metrics-server\"},\"name\":\"metrics-server\"},\"spec\":{\"containers\":[{\"args\":[\"--cert-dir=/tmp\",\"--secure-port=4443\",\"--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname\",\"--kubelet-use-node-status-port\",\"--metric-resolution=60s\",\"--kubelet-insecure-tls\"],\"image\":\"registry.k8s.io/metrics-server/metrics-server:v0.6.4@sha256:ee4304963fb035239bb5c5e8c10f2f38ee80efc16ecbdb9feb7213c17ae2e86e\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/livez\",\"port\":\"https\",\"scheme\":\"HTTPS\"},\"periodSeconds\":10},\"name\":\"metrics-server\",\"ports\":[{\"containerPort\":4443,\"name\":\"https\",\"protocol\":\"TCP\"}],\"readinessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/readyz\",\"port\":\"https\",\"scheme\":\"HTTPS\"},\"periodSeconds\":10},\"resources\":{\"requests\":{\"cpu\":\"100m\",\"memory\":\"200Mi\"}},\"securityContext\":{\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"runAsUser\":1000},\"volumeMounts\":[{\"mountPath\":\"/tmp\",\"name\":\"tmp-dir\"}]}],\"priorityClassName\":\"system-cluster-critical\",\"serviceAccountName\":\"metrics-server\",\"volumes\":[{\"emptyDir\":{},\"name\":\"tmp-dir\"}]}}}}\n"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "metrics-server"
                    }
                },
                "template": {
                    "metadata": {
                        "name": "metrics-server",
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "metrics-server"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "tmp-dir",
                                "emptyDir": {}
                            }
                        ],
                        "containers": [
                            {
                                "name": "metrics-server",
                                "image": "registry.k8s.io/metrics-server/metrics-server:v0.6.4@sha256:ee4304963fb035239bb5c5e8c10f2f38ee80efc16ecbdb9feb7213c17ae2e86e",
                                "args": [
                                    "--cert-dir=/tmp",
                                    "--secure-port=4443",
                                    "--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname",
                                    "--kubelet-use-node-status-port",
                                    "--metric-resolution=60s",
                                    "--kubelet-insecure-tls"
                                ],
                                "ports": [
                                    {
                                        "name": "https",
                                        "containerPort": 4443,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "200Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "tmp-dir",
                                        "mountPath": "/tmp"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/livez",
                                        "port": "https",
                                        "scheme": "HTTPS"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/readyz",
                                        "port": "https",
                                        "scheme": "HTTPS"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "runAsUser": 1000,
                                    "runAsNonRoot": true,
                                    "readOnlyRootFilesystem": true
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "metrics-server",
                        "serviceAccount": "metrics-server",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "priorityClassName": "system-cluster-critical"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 0,
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2024-05-09T22:20:47Z",
                        "lastTransitionTime": "2024-05-09T22:20:47Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2024-05-09T22:20:47Z",
                        "lastTransitionTime": "2024-05-09T22:19:37Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"metrics-server-7c66d45ddc\" has successfully progressed."
                    }
                ]
            }
        }
    ]
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "6985"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-5dd5756b68",
                "namespace": "kube-system",
                "uid": "140e23bf-dfbb-4d96-82f8-aaacd7e9179d",
                "resourceVersion": "401",
                "generation": 1,
                "creationTimestamp": "2024-05-09T20:39:01Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "5dd5756b68"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "coredns",
                        "uid": "7f032ee2-2fb2-4e06-9892-c6b6294d2f3c",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns",
                        "pod-template-hash": "5dd5756b68"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns",
                            "pod-template-hash": "5dd5756b68"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "config-volume",
                                "configMap": {
                                    "name": "coredns",
                                    "items": [
                                        {
                                            "key": "Corefile",
                                            "path": "Corefile"
                                        }
                                    ],
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "coredns",
                                "image": "registry.k8s.io/coredns/coredns:v1.10.1",
                                "args": [
                                    "-conf",
                                    "/etc/coredns/Corefile"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 9153,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "config-volume",
                                        "readOnly": true,
                                        "mountPath": "/etc/coredns"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/ready",
                                        "port": 8181,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "all"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "coredns",
                        "serviceAccount": "coredns",
                        "securityContext": {},
                        "affinity": {
                            "podAntiAffinity": {
                                "preferredDuringSchedulingIgnoredDuringExecution": [
                                    {
                                        "weight": 100,
                                        "podAffinityTerm": {
                                            "labelSelector": {
                                                "matchExpressions": [
                                                    {
                                                        "key": "k8s-app",
                                                        "operator": "In",
                                                        "values": [
                                                            "kube-dns"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "topologyKey": "kubernetes.io/hostname"
                                        }
                                    }
                                ]
                            }
                        },
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "key": "node-role.kubernetes.io/control-plane",
                                "effect": "NoSchedule"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        },
        {
            "metadata": {
                "name": "metrics-server-7c66d45ddc",
                "namespace": "kube-system",
                "uid": "14fea236-aecb-4ce6-b527-c190887cf71a",
                "resourceVersion": "5366",
                "generation": 1,
                "creationTimestamp": "2024-05-09T22:19:37Z",
                "labels": {
                    "k8s-app": "metrics-server",
                    "pod-template-hash": "7c66d45ddc"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "metrics-server",
                        "uid": "1ea2a978-9dee-4823-9e3c-a3bc69f22d0a",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "metrics-server",
                        "pod-template-hash": "7c66d45ddc"
                    }
                },
                "template": {
                    "metadata": {
                        "name": "metrics-server",
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "metrics-server",
                            "pod-template-hash": "7c66d45ddc"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "tmp-dir",
                                "emptyDir": {}
                            }
                        ],
                        "containers": [
                            {
                                "name": "metrics-server",
                                "image": "registry.k8s.io/metrics-server/metrics-server:v0.6.4@sha256:ee4304963fb035239bb5c5e8c10f2f38ee80efc16ecbdb9feb7213c17ae2e86e",
                                "args": [
                                    "--cert-dir=/tmp",
                                    "--secure-port=4443",
                                    "--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname",
                                    "--kubelet-use-node-status-port",
                                    "--metric-resolution=60s",
                                    "--kubelet-insecure-tls"
                                ],
                                "ports": [
                                    {
                                        "name": "https",
                                        "containerPort": 4443,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "200Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "tmp-dir",
                                        "mountPath": "/tmp"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/livez",
                                        "port": "https",
                                        "scheme": "HTTPS"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/readyz",
                                        "port": "https",
                                        "scheme": "HTTPS"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "runAsUser": 1000,
                                    "runAsNonRoot": true,
                                    "readOnlyRootFilesystem": true
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "metrics-server",
                        "serviceAccount": "metrics-server",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "priorityClassName": "system-cluster-critical"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        }
    ]
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "6985"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-5dd5756b68-b2lqb",
                "generateName": "coredns-5dd5756b68-",
                "namespace": "kube-system",
                "uid": "1fd25e26-e66c-48c2-a89d-8e4c1d15df57",
                "resourceVersion": "398",
                "creationTimestamp": "2024-05-09T20:39:01Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "5dd5756b68"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "coredns-5dd5756b68",
                        "uid": "140e23bf-dfbb-4d96-82f8-aaacd7e9179d",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "config-volume",
                        "configMap": {
                            "name": "coredns",
                            "items": [
                                {
                                    "key": "Corefile",
                                    "path": "Corefile"
                                }
                            ],
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "kube-api-access-ztlxl",
                        "projected": {
                            "sources": [
                                {
                                    "serviceAccountToken": {
                                        "expirationSeconds": 3607,
                                        "path": "token"
                                    }
                                },
                                {
                                    "configMap": {
                                        "name": "kube-root-ca.crt",
                                        "items": [
                                            {
                                                "key": "ca.crt",
                                                "path": "ca.crt"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "downwardAPI": {
                                        "items": [
                                            {
                                                "path": "namespace",
                                                "fieldRef": {
                                                    "apiVersion": "v1",
                                                    "fieldPath": "metadata.namespace"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ],
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "coredns",
                        "image": "registry.k8s.io/coredns/coredns:v1.10.1",
                        "args": [
                            "-conf",
                            "/etc/coredns/Corefile"
                        ],
                        "ports": [
                            {
                                "name": "dns",
                                "containerPort": 53,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp",
                                "containerPort": 53,
                                "protocol": "TCP"
                            },
                            {
                                "name": "metrics",
                                "containerPort": 9153,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "memory": "170Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "70Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "config-volume",
                                "readOnly": true,
                                "mountPath": "/etc/coredns"
                            },
                            {
                                "name": "kube-api-access-ztlxl",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 8080,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/ready",
                                "port": 8181,
                                "scheme": "HTTP"
                            },
                            "timeoutSeconds": 1,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "capabilities": {
                                "add": [
                                    "NET_BIND_SERVICE"
                                ],
                                "drop": [
                                    "all"
                                ]
                            },
                            "readOnlyRootFilesystem": true,
                            "allowPrivilegeEscalation": false
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "nodeSelector": {
                    "kubernetes.io/os": "linux"
                },
                "serviceAccountName": "coredns",
                "serviceAccount": "coredns",
                "nodeName": "minikube",
                "securityContext": {},
                "affinity": {
                    "podAntiAffinity": {
                        "preferredDuringSchedulingIgnoredDuringExecution": [
                            {
                                "weight": 100,
                                "podAffinityTerm": {
                                    "labelSelector": {
                                        "matchExpressions": [
                                            {
                                                "key": "k8s-app",
                                                "operator": "In",
                                                "values": [
                                                    "kube-dns"
                                                ]
                                            }
                                        ]
                                    },
                                    "topologyKey": "kubernetes.io/hostname"
                                }
                            }
                        ]
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node-role.kubernetes.io/control-plane",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:39:01Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:39:03Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:39:03Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:39:01Z"
                    }
                ],
                "hostIP": "192.168.49.2",
                "podIP": "10.244.0.2",
                "podIPs": [
                    {
                        "ip": "10.244.0.2"
                    }
                ],
                "startTime": "2024-05-09T20:39:01Z",
                "containerStatuses": [
                    {
                        "name": "coredns",
                        "state": {
                            "running": {
                                "startedAt": "2024-05-09T20:39:02Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "registry.k8s.io/coredns/coredns:v1.10.1",
                        "imageID": "docker-pullable://registry.k8s.io/coredns/coredns@sha256:a0ead06651cf580044aeb0a0feba63591858fb2e43ade8c9dea45a6a89ae7e5e",
                        "containerID": "docker://ec4104891bf1ab68d248a240c4717c7ade4cfb1d059d47de814b6e6479ac4fe6",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "etcd-minikube",
                "namespace": "kube-system",
                "uid": "41ffa118-b585-454c-a03e-78555e5a5f5c",
                "resourceVersion": "321",
                "creationTimestamp": "2024-05-09T20:38:49Z",
                "labels": {
                    "component": "etcd",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubeadm.kubernetes.io/etcd.advertise-client-urls": "https://192.168.49.2:2379",
                    "kubernetes.io/config.hash": "9aac5b5c8815def09a2ef9e37b89da55",
                    "kubernetes.io/config.mirror": "9aac5b5c8815def09a2ef9e37b89da55",
                    "kubernetes.io/config.seen": "2024-05-09T20:38:48.981650685Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "fed7ce0a-cb7c-4dcf-9810-bc0ab8181a2d",
                        "controller": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "etcd-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs/etcd",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "etcd-data",
                        "hostPath": {
                            "path": "/var/lib/minikube/etcd",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "etcd",
                        "image": "registry.k8s.io/etcd:3.5.9-0",
                        "command": [
                            "etcd",
                            "--advertise-client-urls=https://192.168.49.2:2379",
                            "--cert-file=/var/lib/minikube/certs/etcd/server.crt",
                            "--client-cert-auth=true",
                            "--data-dir=/var/lib/minikube/etcd",
                            "--experimental-initial-corrupt-check=true",
                            "--experimental-watch-progress-notify-interval=5s",
                            "--initial-advertise-peer-urls=https://192.168.49.2:2380",
                            "--initial-cluster=minikube=https://192.168.49.2:2380",
                            "--key-file=/var/lib/minikube/certs/etcd/server.key",
                            "--listen-client-urls=https://127.0.0.1:2379,https://192.168.49.2:2379",
                            "--listen-metrics-urls=http://127.0.0.1:2381",
                            "--listen-peer-urls=https://192.168.49.2:2380",
                            "--name=minikube",
                            "--peer-cert-file=/var/lib/minikube/certs/etcd/peer.crt",
                            "--peer-client-cert-auth=true",
                            "--peer-key-file=/var/lib/minikube/certs/etcd/peer.key",
                            "--peer-trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt",
                            "--proxy-refresh-interval=70000",
                            "--snapshot-count=10000",
                            "--trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "100m",
                                "memory": "100Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "etcd-data",
                                "mountPath": "/var/lib/minikube/etcd"
                            },
                            {
                                "name": "etcd-certs",
                                "mountPath": "/var/lib/minikube/certs/etcd"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/health?exclude=NOSPACE\u0026serializable=true",
                                "port": 2381,
                                "host": "127.0.0.1",
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/health?serializable=false",
                                "port": 2381,
                                "host": "127.0.0.1",
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {
                    "seccompProfile": {
                        "type": "RuntimeDefault"
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:38:49Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:38:56Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:38:56Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:38:49Z"
                    }
                ],
                "hostIP": "192.168.49.2",
                "podIP": "192.168.49.2",
                "podIPs": [
                    {
                        "ip": "192.168.49.2"
                    }
                ],
                "startTime": "2024-05-09T20:38:49Z",
                "containerStatuses": [
                    {
                        "name": "etcd",
                        "state": {
                            "running": {
                                "startedAt": "2024-05-09T20:38:44Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "registry.k8s.io/etcd:3.5.9-0",
                        "imageID": "docker-pullable://registry.k8s.io/etcd@sha256:e013d0d5e4e25d00c61a7ff839927a1f36479678f11e49502b53a5e0b14f10c3",
                        "containerID": "docker://f6d5bfd70bf4e45aab0427e63071b1ffeab211b3acf21aa77ba8dca6f257d728",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-apiserver-minikube",
                "namespace": "kube-system",
                "uid": "5fb3b2e9-f0e7-42f0-b8d6-e6ae5dcf3e1c",
                "resourceVersion": "360",
                "creationTimestamp": "2024-05-09T20:38:49Z",
                "labels": {
                    "component": "kube-apiserver",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint": "192.168.49.2:8443",
                    "kubernetes.io/config.hash": "55b4bbe24dac3803a7379f9ae169d6ba",
                    "kubernetes.io/config.mirror": "55b4bbe24dac3803a7379f9ae169d6ba",
                    "kubernetes.io/config.seen": "2024-05-09T20:38:48.981655605Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "fed7ce0a-cb7c-4dcf-9810-bc0ab8181a2d",
                        "controller": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "ca-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "etc-ca-certificates",
                        "hostPath": {
                            "path": "/etc/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "k8s-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "usr-local-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/local/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "usr-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-apiserver",
                        "image": "registry.k8s.io/kube-apiserver:v1.28.3",
                        "command": [
                            "kube-apiserver",
                            "--advertise-address=192.168.49.2",
                            "--allow-privileged=true",
                            "--authorization-mode=Node,RBAC",
                            "--client-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota",
                            "--enable-bootstrap-token-auth=true",
                            "--etcd-cafile=/var/lib/minikube/certs/etcd/ca.crt",
                            "--etcd-certfile=/var/lib/minikube/certs/apiserver-etcd-client.crt",
                            "--etcd-keyfile=/var/lib/minikube/certs/apiserver-etcd-client.key",
                            "--etcd-servers=https://127.0.0.1:2379",
                            "--kubelet-client-certificate=/var/lib/minikube/certs/apiserver-kubelet-client.crt",
                            "--kubelet-client-key=/var/lib/minikube/certs/apiserver-kubelet-client.key",
                            "--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname",
                            "--proxy-client-cert-file=/var/lib/minikube/certs/front-proxy-client.crt",
                            "--proxy-client-key-file=/var/lib/minikube/certs/front-proxy-client.key",
                            "--requestheader-allowed-names=front-proxy-client",
                            "--requestheader-client-ca-file=/var/lib/minikube/certs/front-proxy-ca.crt",
                            "--requestheader-extra-headers-prefix=X-Remote-Extra-",
                            "--requestheader-group-headers=X-Remote-Group",
                            "--requestheader-username-headers=X-Remote-User",
                            "--secure-port=8443",
                            "--service-account-issuer=https://kubernetes.default.svc.cluster.local",
                            "--service-account-key-file=/var/lib/minikube/certs/sa.pub",
                            "--service-account-signing-key-file=/var/lib/minikube/certs/sa.key",
                            "--service-cluster-ip-range=10.96.0.0/12",
                            "--tls-cert-file=/var/lib/minikube/certs/apiserver.crt",
                            "--tls-private-key-file=/var/lib/minikube/certs/apiserver.key"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "250m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "ca-certs",
                                "readOnly": true,
                                "mountPath": "/etc/ssl/certs"
                            },
                            {
                                "name": "etc-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/etc/ca-certificates"
                            },
                            {
                                "name": "k8s-certs",
                                "readOnly": true,
                                "mountPath": "/var/lib/minikube/certs"
                            },
                            {
                                "name": "usr-local-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/local/share/ca-certificates"
                            },
                            {
                                "name": "usr-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/share/ca-certificates"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/livez",
                                "port": 8443,
                                "host": "192.168.49.2",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/readyz",
                                "port": 8443,
                                "host": "192.168.49.2",
                                "scheme": "HTTPS"
                            },
                            "timeoutSeconds": 15,
                            "periodSeconds": 1,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/livez",
                                "port": 8443,
                                "host": "192.168.49.2",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {
                    "seccompProfile": {
                        "type": "RuntimeDefault"
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:38:49Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:39:01Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:39:01Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:38:49Z"
                    }
                ],
                "hostIP": "192.168.49.2",
                "podIP": "192.168.49.2",
                "podIPs": [
                    {
                        "ip": "192.168.49.2"
                    }
                ],
                "startTime": "2024-05-09T20:38:49Z",
                "containerStatuses": [
                    {
                        "name": "kube-apiserver",
                        "state": {
                            "running": {
                                "startedAt": "2024-05-09T20:38:44Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "registry.k8s.io/kube-apiserver:v1.28.3",
                        "imageID": "docker-pullable://registry.k8s.io/kube-apiserver@sha256:8db46adefb0f251da210504e2ce268c36a5a7c630667418ea4601f63c9057a2d",
                        "containerID": "docker://50488a923542c439b31b0354559ba2853848e4150ab114842870f77a7b4aec61",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-controller-manager-minikube",
                "namespace": "kube-system",
                "uid": "af7ff166-abcf-463c-afee-fffd1bc64cea",
                "resourceVersion": "394",
                "creationTimestamp": "2024-05-09T20:38:47Z",
                "labels": {
                    "component": "kube-controller-manager",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "7da72fc2e2cfb27aacf6cffd1c72da00",
                    "kubernetes.io/config.mirror": "7da72fc2e2cfb27aacf6cffd1c72da00",
                    "kubernetes.io/config.seen": "2024-05-09T20:38:43.927774038Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "fed7ce0a-cb7c-4dcf-9810-bc0ab8181a2d",
                        "controller": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "ca-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "etc-ca-certificates",
                        "hostPath": {
                            "path": "/etc/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "flexvolume-dir",
                        "hostPath": {
                            "path": "/usr/libexec/kubernetes/kubelet-plugins/volume/exec",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "k8s-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "kubeconfig",
                        "hostPath": {
                            "path": "/etc/kubernetes/controller-manager.conf",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "usr-local-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/local/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "usr-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-controller-manager",
                        "image": "registry.k8s.io/kube-controller-manager:v1.28.3",
                        "command": [
                            "kube-controller-manager",
                            "--allocate-node-cidrs=true",
                            "--authentication-kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--authorization-kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--bind-address=127.0.0.1",
                            "--client-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--cluster-cidr=10.244.0.0/16",
                            "--cluster-name=mk",
                            "--cluster-signing-cert-file=/var/lib/minikube/certs/ca.crt",
                            "--cluster-signing-key-file=/var/lib/minikube/certs/ca.key",
                            "--controllers=*,bootstrapsigner,tokencleaner",
                            "--kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--leader-elect=false",
                            "--requestheader-client-ca-file=/var/lib/minikube/certs/front-proxy-ca.crt",
                            "--root-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--service-account-private-key-file=/var/lib/minikube/certs/sa.key",
                            "--service-cluster-ip-range=10.96.0.0/12",
                            "--use-service-account-credentials=true"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "200m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "ca-certs",
                                "readOnly": true,
                                "mountPath": "/etc/ssl/certs"
                            },
                            {
                                "name": "etc-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/etc/ca-certificates"
                            },
                            {
                                "name": "flexvolume-dir",
                                "mountPath": "/usr/libexec/kubernetes/kubelet-plugins/volume/exec"
                            },
                            {
                                "name": "k8s-certs",
                                "readOnly": true,
                                "mountPath": "/var/lib/minikube/certs"
                            },
                            {
                                "name": "kubeconfig",
                                "readOnly": true,
                                "mountPath": "/etc/kubernetes/controller-manager.conf"
                            },
                            {
                                "name": "usr-local-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/local/share/ca-certificates"
                            },
                            {
                                "name": "usr-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/share/ca-certificates"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10257,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10257,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {
                    "seccompProfile": {
                        "type": "RuntimeDefault"
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:38:49Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:39:02Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:39:02Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:38:49Z"
                    }
                ],
                "hostIP": "192.168.49.2",
                "podIP": "192.168.49.2",
                "podIPs": [
                    {
                        "ip": "192.168.49.2"
                    }
                ],
                "startTime": "2024-05-09T20:38:49Z",
                "containerStatuses": [
                    {
                        "name": "kube-controller-manager",
                        "state": {
                            "running": {
                                "startedAt": "2024-05-09T20:38:44Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "registry.k8s.io/kube-controller-manager:v1.28.3",
                        "imageID": "docker-pullable://registry.k8s.io/kube-controller-manager@sha256:640661231facded984f698e79315bceb5391b04e5159662e940e6e5ab2098707",
                        "containerID": "docker://c483d3beae3a2447f8bce716ce2baba23d0dfd9ae09f76899f60978df7ab65a2",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-proxy-lmswp",
                "generateName": "kube-proxy-",
                "namespace": "kube-system",
                "uid": "3faedad0-c969-4515-bf42-d029999aaae2",
                "resourceVersion": "396",
                "creationTimestamp": "2024-05-09T20:39:01Z",
                "labels": {
                    "controller-revision-hash": "dffc744c9",
                    "k8s-app": "kube-proxy",
                    "pod-template-generation": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "DaemonSet",
                        "name": "kube-proxy",
                        "uid": "7bb922f4-1b76-4760-9632-b4d6a93cc30f",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kube-proxy",
                        "configMap": {
                            "name": "kube-proxy",
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "xtables-lock",
                        "hostPath": {
                            "path": "/run/xtables.lock",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "lib-modules",
                        "hostPath": {
                            "path": "/lib/modules",
                            "type": ""
                        }
                    },
                    {
                        "name": "kube-api-access-xw76v",
                        "projected": {
                            "sources": [
                                {
                                    "serviceAccountToken": {
                                        "expirationSeconds": 3607,
                                        "path": "token"
                                    }
                                },
                                {
                                    "configMap": {
                                        "name": "kube-root-ca.crt",
                                        "items": [
                                            {
                                                "key": "ca.crt",
                                                "path": "ca.crt"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "downwardAPI": {
                                        "items": [
                                            {
                                                "path": "namespace",
                                                "fieldRef": {
                                                    "apiVersion": "v1",
                                                    "fieldPath": "metadata.namespace"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ],
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-proxy",
                        "image": "registry.k8s.io/kube-proxy:v1.28.3",
                        "command": [
                            "/usr/local/bin/kube-proxy",
                            "--config=/var/lib/kube-proxy/config.conf",
                            "--hostname-override=$(NODE_NAME)"
                        ],
                        "env": [
                            {
                                "name": "NODE_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "spec.nodeName"
                                    }
                                }
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "kube-proxy",
                                "mountPath": "/var/lib/kube-proxy"
                            },
                            {
                                "name": "xtables-lock",
                                "mountPath": "/run/xtables.lock"
                            },
                            {
                                "name": "lib-modules",
                                "readOnly": true,
                                "mountPath": "/lib/modules"
                            },
                            {
                                "name": "kube-api-access-xw76v",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "privileged": true
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeSelector": {
                    "kubernetes.io/os": "linux"
                },
                "serviceAccountName": "kube-proxy",
                "serviceAccount": "kube-proxy",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "affinity": {
                    "nodeAffinity": {
                        "requiredDuringSchedulingIgnoredDuringExecution": {
                            "nodeSelectorTerms": [
                                {
                                    "matchFields": [
                                        {
                                            "key": "metadata.name",
                                            "operator": "In",
                                            "values": [
                                                "minikube"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/disk-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/memory-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/pid-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/unschedulable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/network-unavailable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:39:01Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:39:03Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:39:03Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:39:01Z"
                    }
                ],
                "hostIP": "192.168.49.2",
                "podIP": "192.168.49.2",
                "podIPs": [
                    {
                        "ip": "192.168.49.2"
                    }
                ],
                "startTime": "2024-05-09T20:39:01Z",
                "containerStatuses": [
                    {
                        "name": "kube-proxy",
                        "state": {
                            "running": {
                                "startedAt": "2024-05-09T20:39:02Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "registry.k8s.io/kube-proxy:v1.28.3",
                        "imageID": "docker-pullable://registry.k8s.io/kube-proxy@sha256:73a9f275e1fa5f0b9ae744914764847c2c4fdc66e9e528d67dea70007f9a6072",
                        "containerID": "docker://81656b1a54878e25e7be99c60f03260820f8aa7ea5c8210bf2e57217fa21e1b8",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "kube-scheduler-minikube",
                "namespace": "kube-system",
                "uid": "373bf4a5-1bce-41fc-b080-6e12ae21e153",
                "resourceVersion": "325",
                "creationTimestamp": "2024-05-09T20:38:47Z",
                "labels": {
                    "component": "kube-scheduler",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "75ac196d3709dde303d8a81c035c2c28",
                    "kubernetes.io/config.mirror": "75ac196d3709dde303d8a81c035c2c28",
                    "kubernetes.io/config.seen": "2024-05-09T20:38:43.927774648Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "fed7ce0a-cb7c-4dcf-9810-bc0ab8181a2d",
                        "controller": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kubeconfig",
                        "hostPath": {
                            "path": "/etc/kubernetes/scheduler.conf",
                            "type": "FileOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-scheduler",
                        "image": "registry.k8s.io/kube-scheduler:v1.28.3",
                        "command": [
                            "kube-scheduler",
                            "--authentication-kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--authorization-kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--bind-address=127.0.0.1",
                            "--kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--leader-elect=false"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "100m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "kubeconfig",
                                "readOnly": true,
                                "mountPath": "/etc/kubernetes/scheduler.conf"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10259,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10259,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {
                    "seccompProfile": {
                        "type": "RuntimeDefault"
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:38:49Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:38:58Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:38:58Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:38:49Z"
                    }
                ],
                "hostIP": "192.168.49.2",
                "podIP": "192.168.49.2",
                "podIPs": [
                    {
                        "ip": "192.168.49.2"
                    }
                ],
                "startTime": "2024-05-09T20:38:49Z",
                "containerStatuses": [
                    {
                        "name": "kube-scheduler",
                        "state": {
                            "running": {
                                "startedAt": "2024-05-09T20:38:44Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "registry.k8s.io/kube-scheduler:v1.28.3",
                        "imageID": "docker-pullable://registry.k8s.io/kube-scheduler@sha256:2cfaab2fe5e5937bc37f3d05f3eb7a4912a981ab8375f1d9c2c3190b259d1725",
                        "containerID": "docker://bacda1f03e3bfb084178212f69798bd4de893a659650a38a751307bdf15d353c",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "metrics-server-7c66d45ddc-d69gs",
                "generateName": "metrics-server-7c66d45ddc-",
                "namespace": "kube-system",
                "uid": "314bdb98-7392-4028-812e-f6d3037fa04c",
                "resourceVersion": "5363",
                "creationTimestamp": "2024-05-09T22:19:37Z",
                "labels": {
                    "k8s-app": "metrics-server",
                    "pod-template-hash": "7c66d45ddc"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "metrics-server-7c66d45ddc",
                        "uid": "14fea236-aecb-4ce6-b527-c190887cf71a",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "tmp-dir",
                        "emptyDir": {}
                    },
                    {
                        "name": "kube-api-access-bdllf",
                        "projected": {
                            "sources": [
                                {
                                    "serviceAccountToken": {
                                        "expirationSeconds": 3607,
                                        "path": "token"
                                    }
                                },
                                {
                                    "configMap": {
                                        "name": "kube-root-ca.crt",
                                        "items": [
                                            {
                                                "key": "ca.crt",
                                                "path": "ca.crt"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "downwardAPI": {
                                        "items": [
                                            {
                                                "path": "namespace",
                                                "fieldRef": {
                                                    "apiVersion": "v1",
                                                    "fieldPath": "metadata.namespace"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ],
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "metrics-server",
                        "image": "registry.k8s.io/metrics-server/metrics-server:v0.6.4@sha256:ee4304963fb035239bb5c5e8c10f2f38ee80efc16ecbdb9feb7213c17ae2e86e",
                        "args": [
                            "--cert-dir=/tmp",
                            "--secure-port=4443",
                            "--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname",
                            "--kubelet-use-node-status-port",
                            "--metric-resolution=60s",
                            "--kubelet-insecure-tls"
                        ],
                        "ports": [
                            {
                                "name": "https",
                                "containerPort": 4443,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "100m",
                                "memory": "200Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "tmp-dir",
                                "mountPath": "/tmp"
                            },
                            {
                                "name": "kube-api-access-bdllf",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/livez",
                                "port": "https",
                                "scheme": "HTTPS"
                            },
                            "timeoutSeconds": 1,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/readyz",
                                "port": "https",
                                "scheme": "HTTPS"
                            },
                            "timeoutSeconds": 1,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "runAsUser": 1000,
                            "runAsNonRoot": true,
                            "readOnlyRootFilesystem": true
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "metrics-server",
                "serviceAccount": "metrics-server",
                "nodeName": "minikube",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T22:19:37Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T22:20:47Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T22:20:47Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T22:19:37Z"
                    }
                ],
                "hostIP": "192.168.49.2",
                "podIP": "10.244.0.4",
                "podIPs": [
                    {
                        "ip": "10.244.0.4"
                    }
                ],
                "startTime": "2024-05-09T22:19:37Z",
                "containerStatuses": [
                    {
                        "name": "metrics-server",
                        "state": {
                            "running": {
                                "startedAt": "2024-05-09T22:19:41Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "registry.k8s.io/metrics-server/metrics-server@sha256:ee4304963fb035239bb5c5e8c10f2f38ee80efc16ecbdb9feb7213c17ae2e86e",
                        "imageID": "docker-pullable://registry.k8s.io/metrics-server/metrics-server@sha256:ee4304963fb035239bb5c5e8c10f2f38ee80efc16ecbdb9feb7213c17ae2e86e",
                        "containerID": "docker://275cb880b1ff7a34846fb9ec556ed5c94ea0da2a74f14739d3cf1d1fbf65e109",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "storage-provisioner",
                "namespace": "kube-system",
                "uid": "c663e644-8482-4edb-b92c-6eb22d2cf408",
                "resourceVersion": "419",
                "creationTimestamp": "2024-05-09T20:38:49Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "integration-test": "storage-provisioner"
                },
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Pod\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"integration-test\":\"storage-provisioner\"},\"name\":\"storage-provisioner\",\"namespace\":\"kube-system\"},\"spec\":{\"containers\":[{\"command\":[\"/storage-provisioner\"],\"image\":\"gcr.io/k8s-minikube/storage-provisioner:v5\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"storage-provisioner\",\"volumeMounts\":[{\"mountPath\":\"/tmp\",\"name\":\"tmp\"}]}],\"hostNetwork\":true,\"serviceAccountName\":\"storage-provisioner\",\"volumes\":[{\"hostPath\":{\"path\":\"/tmp\",\"type\":\"Directory\"},\"name\":\"tmp\"}]}}\n"
                }
            },
            "spec": {
                "volumes": [
                    {
                        "name": "tmp",
                        "hostPath": {
                            "path": "/tmp",
                            "type": "Directory"
                        }
                    },
                    {
                        "name": "kube-api-access-gtl78",
                        "projected": {
                            "sources": [
                                {
                                    "serviceAccountToken": {
                                        "expirationSeconds": 3607,
                                        "path": "token"
                                    }
                                },
                                {
                                    "configMap": {
                                        "name": "kube-root-ca.crt",
                                        "items": [
                                            {
                                                "key": "ca.crt",
                                                "path": "ca.crt"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "downwardAPI": {
                                        "items": [
                                            {
                                                "path": "namespace",
                                                "fieldRef": {
                                                    "apiVersion": "v1",
                                                    "fieldPath": "metadata.namespace"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ],
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "storage-provisioner",
                        "image": "gcr.io/k8s-minikube/storage-provisioner:v5",
                        "command": [
                            "/storage-provisioner"
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "tmp",
                                "mountPath": "/tmp"
                            },
                            {
                                "name": "kube-api-access-gtl78",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "storage-provisioner",
                "serviceAccount": "storage-provisioner",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:39:01Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:39:34Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:39:34Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2024-05-09T20:39:01Z"
                    }
                ],
                "hostIP": "192.168.49.2",
                "podIP": "192.168.49.2",
                "podIPs": [
                    {
                        "ip": "192.168.49.2"
                    }
                ],
                "startTime": "2024-05-09T20:39:01Z",
                "containerStatuses": [
                    {
                        "name": "storage-provisioner",
                        "state": {
                            "running": {
                                "startedAt": "2024-05-09T20:39:33Z"
                            }
                        },
                        "lastState": {
                            "terminated": {
                                "exitCode": 1,
                                "reason": "Error",
                                "startedAt": "2024-05-09T20:39:02Z",
                                "finishedAt": "2024-05-09T20:39:32Z",
                                "containerID": "docker://bc2af4d8ed7d48e239c631baffa9a992ba86daee8b3b26d506e6b2619c332a2a"
                            }
                        },
                        "ready": true,
                        "restartCount": 1,
                        "image": "gcr.io/k8s-minikube/storage-provisioner:v5",
                        "imageID": "docker-pullable://gcr.io/k8s-minikube/storage-provisioner@sha256:18eb69d1418e854ad5a19e399310e52808a8321e4c441c1dddad8977a0d7a944",
                        "containerID": "docker://27ee1e60071bab8cb6f2e6284248910c66d8939934b1bb45dcda4142a99b0a91",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        }
    ]
}
==== START logs for container coredns of pod kube-system/coredns-5dd5756b68-b2lqb ====
.:53
[INFO] plugin/reload: Running configuration SHA512 = 05e3eaddc414b2d71a69b2e2bc6f2681fc1f4d04bcdd3acc1a41457bb7db518208b95ddfc4c9fffedc59c25a8faf458be1af4915a4a3c0d6777cb7a346bc5d86
CoreDNS-1.10.1
linux/amd64, go1.20, 055b2c3
[INFO] 127.0.0.1:50705 - 4956 "HINFO IN 7401687552952461305.2190743684496113323. udp 57 false 512" NXDOMAIN qr,rd,ra 132 0.01487838s
==== END logs for container coredns of pod kube-system/coredns-5dd5756b68-b2lqb ====
==== START logs for container etcd of pod kube-system/etcd-minikube ====
{"level":"warn","ts":"2024-05-09T20:38:44.694732Z","caller":"embed/config.go:673","msg":"Running http and grpc server on single port. This is not recommended for production."}
{"level":"info","ts":"2024-05-09T20:38:44.694886Z","caller":"etcdmain/etcd.go:73","msg":"Running: ","args":["etcd","--advertise-client-urls=https://192.168.49.2:2379","--cert-file=/var/lib/minikube/certs/etcd/server.crt","--client-cert-auth=true","--data-dir=/var/lib/minikube/etcd","--experimental-initial-corrupt-check=true","--experimental-watch-progress-notify-interval=5s","--initial-advertise-peer-urls=https://192.168.49.2:2380","--initial-cluster=minikube=https://192.168.49.2:2380","--key-file=/var/lib/minikube/certs/etcd/server.key","--listen-client-urls=https://127.0.0.1:2379,https://192.168.49.2:2379","--listen-metrics-urls=http://127.0.0.1:2381","--listen-peer-urls=https://192.168.49.2:2380","--name=minikube","--peer-cert-file=/var/lib/minikube/certs/etcd/peer.crt","--peer-client-cert-auth=true","--peer-key-file=/var/lib/minikube/certs/etcd/peer.key","--peer-trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt","--proxy-refresh-interval=70000","--snapshot-count=10000","--trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt"]}
{"level":"warn","ts":"2024-05-09T20:38:44.694959Z","caller":"embed/config.go:673","msg":"Running http and grpc server on single port. This is not recommended for production."}
{"level":"info","ts":"2024-05-09T20:38:44.694974Z","caller":"embed/etcd.go:127","msg":"configuring peer listeners","listen-peer-urls":["https://192.168.49.2:2380"]}
{"level":"info","ts":"2024-05-09T20:38:44.695078Z","caller":"embed/etcd.go:495","msg":"starting with peer TLS","tls-info":"cert = /var/lib/minikube/certs/etcd/peer.crt, key = /var/lib/minikube/certs/etcd/peer.key, client-cert=, client-key=, trusted-ca = /var/lib/minikube/certs/etcd/ca.crt, client-cert-auth = true, crl-file = ","cipher-suites":[]}
{"level":"info","ts":"2024-05-09T20:38:44.695415Z","caller":"embed/etcd.go:135","msg":"configuring client listeners","listen-client-urls":["https://127.0.0.1:2379","https://192.168.49.2:2379"]}
{"level":"info","ts":"2024-05-09T20:38:44.695497Z","caller":"embed/etcd.go:309","msg":"starting an etcd server","etcd-version":"3.5.9","git-sha":"bdbbde998","go-version":"go1.19.9","go-os":"linux","go-arch":"amd64","max-cpu-set":12,"max-cpu-available":12,"member-initialized":false,"name":"minikube","data-dir":"/var/lib/minikube/etcd","wal-dir":"","wal-dir-dedicated":"","member-dir":"/var/lib/minikube/etcd/member","force-new-cluster":false,"heartbeat-interval":"100ms","election-timeout":"1s","initial-election-tick-advance":true,"snapshot-count":10000,"max-wals":5,"max-snapshots":5,"snapshot-catchup-entries":5000,"initial-advertise-peer-urls":["https://192.168.49.2:2380"],"listen-peer-urls":["https://192.168.49.2:2380"],"advertise-client-urls":["https://192.168.49.2:2379"],"listen-client-urls":["https://127.0.0.1:2379","https://192.168.49.2:2379"],"listen-metrics-urls":["http://127.0.0.1:2381"],"cors":["*"],"host-whitelist":["*"],"initial-cluster":"minikube=https://192.168.49.2:2380","initial-cluster-state":"new","initial-cluster-token":"etcd-cluster","quota-backend-bytes":2147483648,"max-request-bytes":1572864,"max-concurrent-streams":4294967295,"pre-vote":true,"initial-corrupt-check":true,"corrupt-check-time-interval":"0s","compact-check-time-enabled":false,"compact-check-time-interval":"1m0s","auto-compaction-mode":"periodic","auto-compaction-retention":"0s","auto-compaction-interval":"0s","discovery-url":"","discovery-proxy":"","downgrade-check-interval":"5s"}
{"level":"info","ts":"2024-05-09T20:38:44.696841Z","caller":"etcdserver/backend.go:81","msg":"opened backend db","path":"/var/lib/minikube/etcd/member/snap/db","took":"1.062282ms"}
{"level":"info","ts":"2024-05-09T20:38:44.698935Z","caller":"etcdserver/raft.go:495","msg":"starting local member","local-member-id":"aec36adc501070cc","cluster-id":"fa54960ea34d58be"}
{"level":"info","ts":"2024-05-09T20:38:44.698965Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc switched to configuration voters=()"}
{"level":"info","ts":"2024-05-09T20:38:44.698982Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc became follower at term 0"}
{"level":"info","ts":"2024-05-09T20:38:44.698988Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"newRaft aec36adc501070cc [peers: [], term: 0, commit: 0, applied: 0, lastindex: 0, lastterm: 0]"}
{"level":"info","ts":"2024-05-09T20:38:44.698994Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc became follower at term 1"}
{"level":"info","ts":"2024-05-09T20:38:44.699017Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc switched to configuration voters=(12593026477526642892)"}
{"level":"warn","ts":"2024-05-09T20:38:44.700967Z","caller":"auth/store.go:1238","msg":"simple token is not cryptographically signed"}
{"level":"info","ts":"2024-05-09T20:38:44.702007Z","caller":"mvcc/kvstore.go:393","msg":"kvstore restored","current-rev":1}
{"level":"info","ts":"2024-05-09T20:38:44.702755Z","caller":"etcdserver/quota.go:94","msg":"enabled backend quota with default value","quota-name":"v3-applier","quota-size-bytes":2147483648,"quota-size":"2.1 GB"}
{"level":"info","ts":"2024-05-09T20:38:44.703492Z","caller":"etcdserver/server.go:854","msg":"starting etcd server","local-member-id":"aec36adc501070cc","local-server-version":"3.5.9","cluster-version":"to_be_decided"}
{"level":"info","ts":"2024-05-09T20:38:44.70353Z","caller":"etcdserver/server.go:738","msg":"started as single-node; fast-forwarding election ticks","local-member-id":"aec36adc501070cc","forward-ticks":9,"forward-duration":"900ms","election-ticks":10,"election-timeout":"1s"}
{"level":"info","ts":"2024-05-09T20:38:44.703647Z","caller":"fileutil/purge.go:44","msg":"started to purge file","dir":"/var/lib/minikube/etcd/member/snap","suffix":"snap.db","max":5,"interval":"30s"}
{"level":"info","ts":"2024-05-09T20:38:44.703665Z","caller":"fileutil/purge.go:44","msg":"started to purge file","dir":"/var/lib/minikube/etcd/member/snap","suffix":"snap","max":5,"interval":"30s"}
{"level":"info","ts":"2024-05-09T20:38:44.70367Z","caller":"fileutil/purge.go:44","msg":"started to purge file","dir":"/var/lib/minikube/etcd/member/wal","suffix":"wal","max":5,"interval":"30s"}
{"level":"info","ts":"2024-05-09T20:38:44.703972Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc switched to configuration voters=(12593026477526642892)"}
{"level":"info","ts":"2024-05-09T20:38:44.704051Z","caller":"membership/cluster.go:421","msg":"added member","cluster-id":"fa54960ea34d58be","local-member-id":"aec36adc501070cc","added-peer-id":"aec36adc501070cc","added-peer-peer-urls":["https://192.168.49.2:2380"]}
{"level":"info","ts":"2024-05-09T20:38:44.705933Z","caller":"embed/etcd.go:726","msg":"starting with client TLS","tls-info":"cert = /var/lib/minikube/certs/etcd/server.crt, key = /var/lib/minikube/certs/etcd/server.key, client-cert=, client-key=, trusted-ca = /var/lib/minikube/certs/etcd/ca.crt, client-cert-auth = true, crl-file = ","cipher-suites":[]}
{"level":"info","ts":"2024-05-09T20:38:44.706033Z","caller":"embed/etcd.go:597","msg":"serving peer traffic","address":"192.168.49.2:2380"}
{"level":"info","ts":"2024-05-09T20:38:44.706048Z","caller":"embed/etcd.go:569","msg":"cmux::serve","address":"192.168.49.2:2380"}
{"level":"info","ts":"2024-05-09T20:38:44.706076Z","caller":"embed/etcd.go:278","msg":"now serving peer/client/metrics","local-member-id":"aec36adc501070cc","initial-advertise-peer-urls":["https://192.168.49.2:2380"],"listen-peer-urls":["https://192.168.49.2:2380"],"advertise-client-urls":["https://192.168.49.2:2379"],"listen-client-urls":["https://127.0.0.1:2379","https://192.168.49.2:2379"],"listen-metrics-urls":["http://127.0.0.1:2381"]}
{"level":"info","ts":"2024-05-09T20:38:44.706098Z","caller":"embed/etcd.go:855","msg":"serving metrics","address":"http://127.0.0.1:2381"}
{"level":"info","ts":"2024-05-09T20:38:45.199985Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc is starting a new election at term 1"}
{"level":"info","ts":"2024-05-09T20:38:45.200021Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc became pre-candidate at term 1"}
{"level":"info","ts":"2024-05-09T20:38:45.200041Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc received MsgPreVoteResp from aec36adc501070cc at term 1"}
{"level":"info","ts":"2024-05-09T20:38:45.200051Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc became candidate at term 2"}
{"level":"info","ts":"2024-05-09T20:38:45.200057Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc received MsgVoteResp from aec36adc501070cc at term 2"}
{"level":"info","ts":"2024-05-09T20:38:45.200066Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"aec36adc501070cc became leader at term 2"}
{"level":"info","ts":"2024-05-09T20:38:45.200074Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"raft.node: aec36adc501070cc elected leader aec36adc501070cc at term 2"}
{"level":"info","ts":"2024-05-09T20:38:45.200539Z","caller":"etcdserver/server.go:2062","msg":"published local member to cluster through raft","local-member-id":"aec36adc501070cc","local-member-attributes":"{Name:minikube ClientURLs:[https://192.168.49.2:2379]}","request-path":"/0/members/aec36adc501070cc/attributes","cluster-id":"fa54960ea34d58be","publish-timeout":"7s"}
{"level":"info","ts":"2024-05-09T20:38:45.20059Z","caller":"embed/serve.go:103","msg":"ready to serve client requests"}
{"level":"info","ts":"2024-05-09T20:38:45.20061Z","caller":"embed/serve.go:103","msg":"ready to serve client requests"}
{"level":"info","ts":"2024-05-09T20:38:45.200632Z","caller":"etcdserver/server.go:2571","msg":"setting up initial cluster version using v2 API","cluster-version":"3.5"}
{"level":"info","ts":"2024-05-09T20:38:45.200696Z","caller":"etcdmain/main.go:44","msg":"notifying init daemon"}
{"level":"info","ts":"2024-05-09T20:38:45.200745Z","caller":"etcdmain/main.go:50","msg":"successfully notified init daemon"}
{"level":"info","ts":"2024-05-09T20:38:45.201033Z","caller":"membership/cluster.go:584","msg":"set initial cluster version","cluster-id":"fa54960ea34d58be","local-member-id":"aec36adc501070cc","cluster-version":"3.5"}
{"level":"info","ts":"2024-05-09T20:38:45.201123Z","caller":"api/capability.go:75","msg":"enabled capabilities for version","cluster-version":"3.5"}
{"level":"info","ts":"2024-05-09T20:38:45.201154Z","caller":"etcdserver/server.go:2595","msg":"cluster version is updated","cluster-version":"3.5"}
{"level":"info","ts":"2024-05-09T20:38:45.201455Z","caller":"embed/serve.go:250","msg":"serving client traffic securely","traffic":"grpc+http","address":"192.168.49.2:2379"}
{"level":"info","ts":"2024-05-09T20:38:45.201636Z","caller":"embed/serve.go:250","msg":"serving client traffic securely","traffic":"grpc+http","address":"127.0.0.1:2379"}
{"level":"info","ts":"2024-05-09T20:48:45.214088Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":620}
{"level":"info","ts":"2024-05-09T20:48:45.215185Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":620,"took":"825.951µs","hash":3928334658}
{"level":"info","ts":"2024-05-09T20:48:45.215212Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":3928334658,"revision":620,"compact-revision":-1}
{"level":"info","ts":"2024-05-09T20:53:45.217346Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":860}
{"level":"info","ts":"2024-05-09T20:53:45.21812Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":860,"took":"536.041µs","hash":3828984954}
{"level":"info","ts":"2024-05-09T20:53:45.21816Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":3828984954,"revision":860,"compact-revision":620}
{"level":"info","ts":"2024-05-09T20:54:31.594808Z","caller":"traceutil/trace.go:171","msg":"trace[564306395] transaction","detail":"{read_only:false; response_revision:1139; number_of_response:1; }","duration":"213.628025ms","start":"2024-05-09T20:54:31.381163Z","end":"2024-05-09T20:54:31.594791Z","steps":["trace[564306395] 'process raft request'  (duration: 213.547475ms)"],"step_count":1}
{"level":"info","ts":"2024-05-09T20:54:58.151746Z","caller":"traceutil/trace.go:171","msg":"trace[1630628473] transaction","detail":"{read_only:false; response_revision:1160; number_of_response:1; }","duration":"441.222482ms","start":"2024-05-09T20:54:57.710508Z","end":"2024-05-09T20:54:58.15173Z","steps":["trace[1630628473] 'process raft request'  (duration: 441.136172ms)"],"step_count":1}
{"level":"warn","ts":"2024-05-09T20:54:58.152138Z","caller":"v3rpc/interceptor.go:197","msg":"request stats","start time":"2024-05-09T20:54:57.710497Z","time spent":"441.296702ms","remote":"127.0.0.1:43216","response type":"/etcdserverpb.KV/Txn","request count":1,"request size":585,"response count":0,"response size":40,"request content":"compare:<target:MOD key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" mod_revision:1157 > success:<request_put:<key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" value_size:512 >> failure:<request_range:<key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" > >"}
{"level":"info","ts":"2024-05-09T20:55:39.200623Z","caller":"traceutil/trace.go:171","msg":"trace[1261865806] transaction","detail":"{read_only:false; response_revision:1193; number_of_response:1; }","duration":"223.127504ms","start":"2024-05-09T20:55:38.977482Z","end":"2024-05-09T20:55:39.20061Z","steps":["trace[1261865806] 'process raft request'  (duration: 223.053544ms)"],"step_count":1}
{"level":"warn","ts":"2024-05-09T20:55:52.861675Z","caller":"etcdserver/v3_server.go:897","msg":"waiting for ReadIndex response took too long, retrying","sent-request-id":8128029066024119699,"retry-timeout":"500ms"}
{"level":"info","ts":"2024-05-09T20:55:52.894091Z","caller":"traceutil/trace.go:171","msg":"trace[1713422247] linearizableReadLoop","detail":"{readStateIndex:1421; appliedIndex:1420; }","duration":"532.730432ms","start":"2024-05-09T20:55:52.361345Z","end":"2024-05-09T20:55:52.894076Z","steps":["trace[1713422247] 'read index received'  (duration: 532.652522ms)","trace[1713422247] 'applied index is now lower than readState.Index'  (duration: 77.15µs)"],"step_count":2}
{"level":"warn","ts":"2024-05-09T20:55:52.894194Z","caller":"etcdserver/util.go:170","msg":"apply request took too long","took":"532.861532ms","expected-duration":"100ms","prefix":"read-only range ","request":"key:\"/registry/health\" ","response":"range_response_count:0 size:5"}
{"level":"warn","ts":"2024-05-09T20:55:52.894198Z","caller":"etcdserver/util.go:170","msg":"apply request took too long","took":"510.144713ms","expected-duration":"100ms","prefix":"read-only range ","request":"key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" ","response":"range_response_count:1 size:601"}
{"level":"info","ts":"2024-05-09T20:55:52.894219Z","caller":"traceutil/trace.go:171","msg":"trace[1393065878] range","detail":"{range_begin:/registry/health; range_end:; response_count:0; response_revision:1202; }","duration":"532.897333ms","start":"2024-05-09T20:55:52.361313Z","end":"2024-05-09T20:55:52.89421Z","steps":["trace[1393065878] 'agreement among raft nodes before linearized reading'  (duration: 532.836992ms)"],"step_count":1}
{"level":"info","ts":"2024-05-09T20:55:52.894237Z","caller":"traceutil/trace.go:171","msg":"trace[2109532797] range","detail":"{range_begin:/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath; range_end:; response_count:1; response_revision:1202; }","duration":"510.180594ms","start":"2024-05-09T20:55:52.384043Z","end":"2024-05-09T20:55:52.894224Z","steps":["trace[2109532797] 'agreement among raft nodes before linearized reading'  (duration: 510.116403ms)"],"step_count":1}
{"level":"warn","ts":"2024-05-09T20:55:52.894245Z","caller":"v3rpc/interceptor.go:197","msg":"request stats","start time":"2024-05-09T20:55:52.361294Z","time spent":"532.946333ms","remote":"127.0.0.1:43038","response type":"/etcdserverpb.KV/Range","request count":0,"request size":18,"response count":0,"response size":29,"request content":"key:\"/registry/health\" "}
{"level":"warn","ts":"2024-05-09T20:55:52.894262Z","caller":"v3rpc/interceptor.go:197","msg":"request stats","start time":"2024-05-09T20:55:52.38404Z","time spent":"510.216074ms","remote":"127.0.0.1:43216","response type":"/etcdserverpb.KV/Range","request count":0,"request size":67,"response count":1,"response size":625,"request content":"key:\"/registry/services/endpoints/kube-system/k8s.io-minikube-hostpath\" "}
{"level":"warn","ts":"2024-05-09T20:55:52.894198Z","caller":"etcdserver/util.go:170","msg":"apply request took too long","took":"195.88873ms","expected-duration":"100ms","prefix":"read-only range ","request":"key:\"/registry/storageclasses/\" range_end:\"/registry/storageclasses0\" count_only:true ","response":"range_response_count:0 size:7"}
{"level":"info","ts":"2024-05-09T20:55:52.89431Z","caller":"traceutil/trace.go:171","msg":"trace[535867982] range","detail":"{range_begin:/registry/storageclasses/; range_end:/registry/storageclasses0; response_count:0; response_revision:1202; }","duration":"196.006741ms","start":"2024-05-09T20:55:52.698293Z","end":"2024-05-09T20:55:52.894299Z","steps":["trace[535867982] 'agreement among raft nodes before linearized reading'  (duration: 195.8661ms)"],"step_count":1}
{"level":"info","ts":"2024-05-09T20:58:45.22058Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":1100}
{"level":"info","ts":"2024-05-09T20:58:45.221491Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":1100,"took":"656.85µs","hash":3919831324}
{"level":"info","ts":"2024-05-09T20:58:45.221519Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":3919831324,"revision":1100,"compact-revision":860}
{"level":"info","ts":"2024-05-09T21:03:45.223584Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":1340}
{"level":"info","ts":"2024-05-09T21:03:45.224095Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":1340,"took":"326.251µs","hash":42915150}
{"level":"info","ts":"2024-05-09T21:03:45.224108Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":42915150,"revision":1340,"compact-revision":1100}
{"level":"info","ts":"2024-05-09T21:08:45.226566Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":1580}
{"level":"info","ts":"2024-05-09T21:08:45.227455Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":1580,"took":"656.681µs","hash":3885366587}
{"level":"info","ts":"2024-05-09T21:08:45.227479Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":3885366587,"revision":1580,"compact-revision":1340}
{"level":"info","ts":"2024-05-09T21:13:45.229567Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":1822}
{"level":"info","ts":"2024-05-09T21:13:45.230084Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":1822,"took":"333.85µs","hash":1892608644}
{"level":"info","ts":"2024-05-09T21:13:45.230097Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":1892608644,"revision":1822,"compact-revision":1580}
{"level":"info","ts":"2024-05-09T21:18:45.232709Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":2061}
{"level":"info","ts":"2024-05-09T21:18:45.233585Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":2061,"took":"602.671µs","hash":1524796865}
{"level":"info","ts":"2024-05-09T21:18:45.23361Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":1524796865,"revision":2061,"compact-revision":1822}
{"level":"info","ts":"2024-05-09T21:23:45.235516Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":2303}
{"level":"info","ts":"2024-05-09T21:23:45.236307Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":2303,"took":"537.521µs","hash":2523364054}
{"level":"info","ts":"2024-05-09T21:23:45.236329Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":2523364054,"revision":2303,"compact-revision":2061}
{"level":"info","ts":"2024-05-09T21:28:45.23857Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":2543}
{"level":"info","ts":"2024-05-09T21:28:45.239317Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":2543,"took":"513.731µs","hash":3864386500}
{"level":"info","ts":"2024-05-09T21:28:45.239337Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":3864386500,"revision":2543,"compact-revision":2303}
{"level":"info","ts":"2024-05-09T21:33:45.241847Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":2782}
{"level":"info","ts":"2024-05-09T21:33:45.242785Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":2782,"took":"688.841µs","hash":310802246}
{"level":"info","ts":"2024-05-09T21:33:45.242811Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":310802246,"revision":2782,"compact-revision":2543}
{"level":"info","ts":"2024-05-09T21:38:45.245085Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":3024}
{"level":"info","ts":"2024-05-09T21:38:45.245877Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":3024,"took":"564.182µs","hash":2895395740}
{"level":"info","ts":"2024-05-09T21:38:45.2459Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":2895395740,"revision":3024,"compact-revision":2782}
{"level":"info","ts":"2024-05-09T21:43:45.247929Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":3264}
{"level":"info","ts":"2024-05-09T21:43:45.248688Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":3264,"took":"534.071µs","hash":305954380}
{"level":"info","ts":"2024-05-09T21:43:45.24871Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":305954380,"revision":3264,"compact-revision":3024}
{"level":"info","ts":"2024-05-09T21:48:45.252007Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":3507}
{"level":"info","ts":"2024-05-09T21:48:45.252891Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":3507,"took":"624.101µs","hash":539628350}
{"level":"info","ts":"2024-05-09T21:48:45.252912Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":539628350,"revision":3507,"compact-revision":3264}
{"level":"info","ts":"2024-05-09T21:53:45.254897Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":3774}
{"level":"info","ts":"2024-05-09T21:53:45.256432Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":3774,"took":"1.030102ms","hash":937482946}
{"level":"info","ts":"2024-05-09T21:53:45.25648Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":937482946,"revision":3774,"compact-revision":3507}
{"level":"info","ts":"2024-05-09T21:58:45.258553Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":4016}
{"level":"info","ts":"2024-05-09T21:58:45.259397Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":4016,"took":"599.901µs","hash":1100783055}
{"level":"info","ts":"2024-05-09T21:58:45.259421Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":1100783055,"revision":4016,"compact-revision":3774}
{"level":"info","ts":"2024-05-09T22:03:45.26131Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":4255}
{"level":"info","ts":"2024-05-09T22:03:45.262094Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":4255,"took":"569.001µs","hash":26189771}
{"level":"info","ts":"2024-05-09T22:03:45.26212Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":26189771,"revision":4255,"compact-revision":4016}
{"level":"info","ts":"2024-05-09T22:08:45.264606Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":4495}
{"level":"info","ts":"2024-05-09T22:08:45.265425Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":4495,"took":"571.231µs","hash":1242818831}
{"level":"info","ts":"2024-05-09T22:08:45.265449Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":1242818831,"revision":4495,"compact-revision":4255}
{"level":"info","ts":"2024-05-09T22:13:45.267137Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":4736}
{"level":"info","ts":"2024-05-09T22:13:45.267966Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":4736,"took":"585.461µs","hash":1062453786}
{"level":"info","ts":"2024-05-09T22:13:45.267988Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":1062453786,"revision":4736,"compact-revision":4495}
{"level":"info","ts":"2024-05-09T22:18:45.269721Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":4976}
{"level":"info","ts":"2024-05-09T22:18:45.270481Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":4976,"took":"531.941µs","hash":24331543}
{"level":"info","ts":"2024-05-09T22:18:45.270504Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":24331543,"revision":4976,"compact-revision":4736}
{"level":"info","ts":"2024-05-09T22:23:45.273058Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":5217}
{"level":"info","ts":"2024-05-09T22:23:45.273913Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":5217,"took":"603.951µs","hash":391427897}
{"level":"info","ts":"2024-05-09T22:23:45.273935Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":391427897,"revision":5217,"compact-revision":4976}
{"level":"info","ts":"2024-05-09T22:28:45.276584Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":5511}
{"level":"info","ts":"2024-05-09T22:28:45.277516Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":5511,"took":"677.281µs","hash":2068577720}
{"level":"info","ts":"2024-05-09T22:28:45.277541Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":2068577720,"revision":5511,"compact-revision":5217}
{"level":"info","ts":"2024-05-09T22:33:45.279683Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":5751}
{"level":"info","ts":"2024-05-09T22:33:45.280476Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":5751,"took":"553.191µs","hash":3857688682}
{"level":"info","ts":"2024-05-09T22:33:45.280496Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":3857688682,"revision":5751,"compact-revision":5511}
{"level":"info","ts":"2024-05-09T22:38:45.282442Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":5993}
{"level":"info","ts":"2024-05-09T22:38:45.283257Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":5993,"took":"568.861µs","hash":2714450530}
{"level":"info","ts":"2024-05-09T22:38:45.283275Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":2714450530,"revision":5993,"compact-revision":5751}
{"level":"info","ts":"2024-05-09T22:43:45.285133Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":6232}
{"level":"info","ts":"2024-05-09T22:43:45.285925Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":6232,"took":"548.58µs","hash":101340054}
{"level":"info","ts":"2024-05-09T22:43:45.285944Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":101340054,"revision":6232,"compact-revision":5993}
{"level":"info","ts":"2024-05-09T22:48:45.287731Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":6475}
{"level":"info","ts":"2024-05-09T22:48:45.288248Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":6475,"took":"343.951µs","hash":2644700562}
{"level":"info","ts":"2024-05-09T22:48:45.28826Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":2644700562,"revision":6475,"compact-revision":6232}
{"level":"info","ts":"2024-05-09T22:53:45.292525Z","caller":"mvcc/index.go:214","msg":"compact tree index","revision":6716}
{"level":"info","ts":"2024-05-09T22:53:45.293184Z","caller":"mvcc/kvstore_compaction.go:66","msg":"finished scheduled compaction","compact-revision":6716,"took":"447.881µs","hash":3388816381}
{"level":"info","ts":"2024-05-09T22:53:45.293201Z","caller":"mvcc/hash.go:137","msg":"storing new hash","hash":3388816381,"revision":6716,"compact-revision":6475}
==== END logs for container etcd of pod kube-system/etcd-minikube ====
==== START logs for container kube-apiserver of pod kube-system/kube-apiserver-minikube ====
I0509 20:38:44.762511       1 options.go:220] external host was not specified, using 192.168.49.2
I0509 20:38:44.763170       1 server.go:148] Version: v1.28.3
I0509 20:38:44.763182       1 server.go:150] "Golang settings" GOGC="" GOMAXPROCS="" GOTRACEBACK=""
I0509 20:38:45.167607       1 shared_informer.go:311] Waiting for caches to sync for node_authorizer
I0509 20:38:45.173223       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I0509 20:38:45.173231       1 plugins.go:161] Loaded 13 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,PodSecurity,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,ClusterTrustBundleAttest,CertificateSubjectRestriction,ValidatingAdmissionPolicy,ValidatingAdmissionWebhook,ResourceQuota.
I0509 20:38:45.173361       1 instance.go:298] Using reconciler: lease
I0509 20:38:45.224434       1 handler.go:232] Adding GroupVersion apiextensions.k8s.io v1 to ResourceManager
W0509 20:38:45.224446       1 genericapiserver.go:744] Skipping API apiextensions.k8s.io/v1beta1 because it has no resources.
I0509 20:38:45.358153       1 handler.go:232] Adding GroupVersion  v1 to ResourceManager
I0509 20:38:45.358282       1 instance.go:709] API group "internal.apiserver.k8s.io" is not enabled, skipping.
I0509 20:38:45.581533       1 instance.go:709] API group "resource.k8s.io" is not enabled, skipping.
I0509 20:38:45.590751       1 handler.go:232] Adding GroupVersion authentication.k8s.io v1 to ResourceManager
W0509 20:38:45.590764       1 genericapiserver.go:744] Skipping API authentication.k8s.io/v1beta1 because it has no resources.
W0509 20:38:45.590769       1 genericapiserver.go:744] Skipping API authentication.k8s.io/v1alpha1 because it has no resources.
I0509 20:38:45.591008       1 handler.go:232] Adding GroupVersion authorization.k8s.io v1 to ResourceManager
W0509 20:38:45.591014       1 genericapiserver.go:744] Skipping API authorization.k8s.io/v1beta1 because it has no resources.
I0509 20:38:45.591435       1 handler.go:232] Adding GroupVersion autoscaling v2 to ResourceManager
I0509 20:38:45.591832       1 handler.go:232] Adding GroupVersion autoscaling v1 to ResourceManager
W0509 20:38:45.591841       1 genericapiserver.go:744] Skipping API autoscaling/v2beta1 because it has no resources.
W0509 20:38:45.591845       1 genericapiserver.go:744] Skipping API autoscaling/v2beta2 because it has no resources.
I0509 20:38:45.592697       1 handler.go:232] Adding GroupVersion batch v1 to ResourceManager
W0509 20:38:45.592706       1 genericapiserver.go:744] Skipping API batch/v1beta1 because it has no resources.
I0509 20:38:45.593227       1 handler.go:232] Adding GroupVersion certificates.k8s.io v1 to ResourceManager
W0509 20:38:45.593235       1 genericapiserver.go:744] Skipping API certificates.k8s.io/v1beta1 because it has no resources.
W0509 20:38:45.593238       1 genericapiserver.go:744] Skipping API certificates.k8s.io/v1alpha1 because it has no resources.
I0509 20:38:45.593582       1 handler.go:232] Adding GroupVersion coordination.k8s.io v1 to ResourceManager
W0509 20:38:45.593588       1 genericapiserver.go:744] Skipping API coordination.k8s.io/v1beta1 because it has no resources.
W0509 20:38:45.593620       1 genericapiserver.go:744] Skipping API discovery.k8s.io/v1beta1 because it has no resources.
I0509 20:38:45.594026       1 handler.go:232] Adding GroupVersion discovery.k8s.io v1 to ResourceManager
I0509 20:38:45.595083       1 handler.go:232] Adding GroupVersion networking.k8s.io v1 to ResourceManager
W0509 20:38:45.595092       1 genericapiserver.go:744] Skipping API networking.k8s.io/v1beta1 because it has no resources.
W0509 20:38:45.595095       1 genericapiserver.go:744] Skipping API networking.k8s.io/v1alpha1 because it has no resources.
I0509 20:38:45.595371       1 handler.go:232] Adding GroupVersion node.k8s.io v1 to ResourceManager
W0509 20:38:45.595377       1 genericapiserver.go:744] Skipping API node.k8s.io/v1beta1 because it has no resources.
W0509 20:38:45.595381       1 genericapiserver.go:744] Skipping API node.k8s.io/v1alpha1 because it has no resources.
I0509 20:38:45.595869       1 handler.go:232] Adding GroupVersion policy v1 to ResourceManager
W0509 20:38:45.595876       1 genericapiserver.go:744] Skipping API policy/v1beta1 because it has no resources.
I0509 20:38:45.596919       1 handler.go:232] Adding GroupVersion rbac.authorization.k8s.io v1 to ResourceManager
W0509 20:38:45.596927       1 genericapiserver.go:744] Skipping API rbac.authorization.k8s.io/v1beta1 because it has no resources.
W0509 20:38:45.596931       1 genericapiserver.go:744] Skipping API rbac.authorization.k8s.io/v1alpha1 because it has no resources.
I0509 20:38:45.597214       1 handler.go:232] Adding GroupVersion scheduling.k8s.io v1 to ResourceManager
W0509 20:38:45.597222       1 genericapiserver.go:744] Skipping API scheduling.k8s.io/v1beta1 because it has no resources.
W0509 20:38:45.597225       1 genericapiserver.go:744] Skipping API scheduling.k8s.io/v1alpha1 because it has no resources.
I0509 20:38:45.598485       1 handler.go:232] Adding GroupVersion storage.k8s.io v1 to ResourceManager
W0509 20:38:45.598493       1 genericapiserver.go:744] Skipping API storage.k8s.io/v1beta1 because it has no resources.
W0509 20:38:45.598496       1 genericapiserver.go:744] Skipping API storage.k8s.io/v1alpha1 because it has no resources.
I0509 20:38:45.599049       1 handler.go:232] Adding GroupVersion flowcontrol.apiserver.k8s.io v1beta3 to ResourceManager
I0509 20:38:45.599732       1 handler.go:232] Adding GroupVersion flowcontrol.apiserver.k8s.io v1beta2 to ResourceManager
W0509 20:38:45.599738       1 genericapiserver.go:744] Skipping API flowcontrol.apiserver.k8s.io/v1beta1 because it has no resources.
W0509 20:38:45.599741       1 genericapiserver.go:744] Skipping API flowcontrol.apiserver.k8s.io/v1alpha1 because it has no resources.
I0509 20:38:45.601788       1 handler.go:232] Adding GroupVersion apps v1 to ResourceManager
W0509 20:38:45.601794       1 genericapiserver.go:744] Skipping API apps/v1beta2 because it has no resources.
W0509 20:38:45.601797       1 genericapiserver.go:744] Skipping API apps/v1beta1 because it has no resources.
I0509 20:38:45.602225       1 handler.go:232] Adding GroupVersion admissionregistration.k8s.io v1 to ResourceManager
W0509 20:38:45.602231       1 genericapiserver.go:744] Skipping API admissionregistration.k8s.io/v1beta1 because it has no resources.
W0509 20:38:45.602234       1 genericapiserver.go:744] Skipping API admissionregistration.k8s.io/v1alpha1 because it has no resources.
I0509 20:38:45.602482       1 handler.go:232] Adding GroupVersion events.k8s.io v1 to ResourceManager
W0509 20:38:45.602487       1 genericapiserver.go:744] Skipping API events.k8s.io/v1beta1 because it has no resources.
I0509 20:38:45.653478       1 handler.go:232] Adding GroupVersion apiregistration.k8s.io v1 to ResourceManager
W0509 20:38:45.653493       1 genericapiserver.go:744] Skipping API apiregistration.k8s.io/v1beta1 because it has no resources.
I0509 20:38:45.946985       1 dynamic_cafile_content.go:157] "Starting controller" name="request-header::/var/lib/minikube/certs/front-proxy-ca.crt"
I0509 20:38:45.947005       1 dynamic_cafile_content.go:157] "Starting controller" name="client-ca-bundle::/var/lib/minikube/certs/ca.crt"
I0509 20:38:45.947309       1 dynamic_serving_content.go:132] "Starting controller" name="serving-cert::/var/lib/minikube/certs/apiserver.crt::/var/lib/minikube/certs/apiserver.key"
I0509 20:38:45.947781       1 secure_serving.go:213] Serving securely on [::]:8443
I0509 20:38:45.947826       1 tlsconfig.go:240] "Starting DynamicServingCertificateController"
I0509 20:38:45.947850       1 apf_controller.go:372] Starting API Priority and Fairness config controller
I0509 20:38:45.947880       1 dynamic_serving_content.go:132] "Starting controller" name="aggregator-proxy-cert::/var/lib/minikube/certs/front-proxy-client.crt::/var/lib/minikube/certs/front-proxy-client.key"
I0509 20:38:45.947886       1 handler_discovery.go:412] Starting ResourceDiscoveryManager
I0509 20:38:45.947918       1 system_namespaces_controller.go:67] Starting system namespaces controller
I0509 20:38:45.947934       1 controller.go:78] Starting OpenAPI AggregationController
I0509 20:38:45.947974       1 apiservice_controller.go:97] Starting APIServiceRegistrationController
I0509 20:38:45.947981       1 cache.go:32] Waiting for caches to sync for APIServiceRegistrationController controller
I0509 20:38:45.948052       1 aggregator.go:164] waiting for initial CRD sync...
I0509 20:38:45.948084       1 gc_controller.go:78] Starting apiserver lease garbage collector
I0509 20:38:45.948109       1 crdregistration_controller.go:111] Starting crd-autoregister controller
I0509 20:38:45.948126       1 controller.go:134] Starting OpenAPI controller
I0509 20:38:45.948131       1 shared_informer.go:311] Waiting for caches to sync for crd-autoregister
I0509 20:38:45.948133       1 gc_controller.go:78] Starting apiserver lease garbage collector
I0509 20:38:45.948140       1 controller.go:116] Starting legacy_token_tracking_controller
I0509 20:38:45.948149       1 shared_informer.go:311] Waiting for caches to sync for configmaps
I0509 20:38:45.948106       1 customresource_discovery_controller.go:289] Starting DiscoveryController
I0509 20:38:45.948247       1 cluster_authentication_trust_controller.go:440] Starting cluster_authentication_trust_controller controller
I0509 20:38:45.948253       1 shared_informer.go:311] Waiting for caches to sync for cluster_authentication_trust_controller
I0509 20:38:45.948315       1 controller.go:85] Starting OpenAPI V3 controller
I0509 20:38:45.948332       1 available_controller.go:423] Starting AvailableConditionController
I0509 20:38:45.948338       1 cache.go:32] Waiting for caches to sync for AvailableConditionController controller
I0509 20:38:45.948340       1 establishing_controller.go:76] Starting EstablishingController
I0509 20:38:45.948342       1 dynamic_cafile_content.go:157] "Starting controller" name="request-header::/var/lib/minikube/certs/front-proxy-ca.crt"
I0509 20:38:45.948352       1 nonstructuralschema_controller.go:192] Starting NonStructuralSchemaConditionController
I0509 20:38:45.948359       1 controller.go:80] Starting OpenAPI V3 AggregationController
I0509 20:38:45.948363       1 apiapproval_controller.go:186] Starting KubernetesAPIApprovalPolicyConformantConditionController
I0509 20:38:45.948376       1 crd_finalizer.go:266] Starting CRDFinalizer
I0509 20:38:45.948408       1 dynamic_cafile_content.go:157] "Starting controller" name="client-ca-bundle::/var/lib/minikube/certs/ca.crt"
I0509 20:38:45.948332       1 naming_controller.go:291] Starting NamingConditionController
I0509 20:38:45.967655       1 shared_informer.go:318] Caches are synced for node_authorizer
I0509 20:38:46.048533       1 apf_controller.go:377] Running API Priority and Fairness config worker
I0509 20:38:46.048546       1 apf_controller.go:380] Running API Priority and Fairness periodic rebalancing process
I0509 20:38:46.048555       1 shared_informer.go:318] Caches are synced for crd-autoregister
I0509 20:38:46.048570       1 shared_informer.go:318] Caches are synced for configmaps
I0509 20:38:46.048537       1 cache.go:39] Caches are synced for AvailableConditionController controller
I0509 20:38:46.048629       1 cache.go:39] Caches are synced for APIServiceRegistrationController controller
I0509 20:38:46.048569       1 shared_informer.go:318] Caches are synced for cluster_authentication_trust_controller
I0509 20:38:46.048576       1 aggregator.go:166] initial CRD sync complete...
I0509 20:38:46.048701       1 autoregister_controller.go:141] Starting autoregister controller
I0509 20:38:46.048706       1 cache.go:32] Waiting for caches to sync for autoregister controller
I0509 20:38:46.048714       1 cache.go:39] Caches are synced for autoregister controller
I0509 20:38:46.049356       1 controller.go:624] quota admission added evaluator for: namespaces
I0509 20:38:46.063831       1 controller.go:624] quota admission added evaluator for: leases.coordination.k8s.io
I0509 20:38:46.953003       1 storage_scheduling.go:95] created PriorityClass system-node-critical with value 2000001000
I0509 20:38:46.956328       1 storage_scheduling.go:95] created PriorityClass system-cluster-critical with value 2000000000
I0509 20:38:46.956344       1 storage_scheduling.go:111] all system priority classes are created successfully or already exist.
I0509 20:38:47.187227       1 controller.go:624] quota admission added evaluator for: roles.rbac.authorization.k8s.io
I0509 20:38:47.209727       1 controller.go:624] quota admission added evaluator for: rolebindings.rbac.authorization.k8s.io
I0509 20:38:47.255020       1 alloc.go:330] "allocated clusterIPs" service="default/kubernetes" clusterIPs={"IPv4":"10.96.0.1"}
W0509 20:38:47.258442       1 lease.go:263] Resetting endpoints for master service "kubernetes" to [192.168.49.2]
I0509 20:38:47.259241       1 controller.go:624] quota admission added evaluator for: endpoints
I0509 20:38:47.262254       1 controller.go:624] quota admission added evaluator for: endpointslices.discovery.k8s.io
I0509 20:38:47.972063       1 controller.go:624] quota admission added evaluator for: serviceaccounts
I0509 20:38:48.937049       1 controller.go:624] quota admission added evaluator for: deployments.apps
I0509 20:38:48.942541       1 alloc.go:330] "allocated clusterIPs" service="kube-system/kube-dns" clusterIPs={"IPv4":"10.96.0.10"}
I0509 20:38:48.947884       1 controller.go:624] quota admission added evaluator for: daemonsets.apps
I0509 20:39:01.277951       1 controller.go:624] quota admission added evaluator for: replicasets.apps
I0509 20:39:01.777922       1 controller.go:624] quota admission added evaluator for: controllerrevisions.apps
I0509 20:55:52.894773       1 trace.go:236] Trace[41777213]: "Get" accept:application/json, */*,audit-id:153c7f3d-2878-4280-b530-aec2e561e348,client:192.168.49.2,protocol:HTTP/2.0,resource:endpoints,scope:resource,url:/api/v1/namespaces/kube-system/endpoints/k8s.io-minikube-hostpath,user-agent:storage-provisioner/v0.0.0 (linux/amd64) kubernetes/$Format,verb:GET (09-May-2024 20:55:52.383) (total time: 510ms):
Trace[41777213]: ---"About to write a response" 510ms (20:55:52.894)
Trace[41777213]: [510.897194ms] [510.897194ms] END
I0509 22:19:37.345080       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
W0509 22:19:37.348165       1 handler_proxy.go:93] no RequestInfo found in the context
E0509 22:19:37.348198       1 controller.go:146] Error updating APIService "v1beta1.metrics.k8s.io" with err: failed to download v1beta1.metrics.k8s.io: failed to retrieve openAPI spec, http error: ResponseCode: 503, Body: service unavailable
, Header: map[Content-Type:[text/plain; charset=utf-8] X-Content-Type-Options:[nosniff]]
E0509 22:19:37.348240       1 handler_proxy.go:137] error resolving kube-system/metrics-server: service "metrics-server" not found
I0509 22:19:37.348264       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:19:37.396638       1 alloc.go:330] "allocated clusterIPs" service="kube-system/metrics-server" clusterIPs={"IPv4":"10.107.177.154"}
W0509 22:19:37.399639       1 handler_proxy.go:93] no RequestInfo found in the context
E0509 22:19:37.399674       1 controller.go:146] Error updating APIService "v1beta1.metrics.k8s.io" with err: failed to download v1beta1.metrics.k8s.io: failed to retrieve openAPI spec, http error: ResponseCode: 503, Body: service unavailable
, Header: map[Content-Type:[text/plain; charset=utf-8] X-Content-Type-Options:[nosniff]]
W0509 22:19:37.407903       1 handler_proxy.go:93] no RequestInfo found in the context
E0509 22:19:37.407935       1 controller.go:146] Error updating APIService "v1beta1.metrics.k8s.io" with err: failed to download v1beta1.metrics.k8s.io: failed to retrieve openAPI spec, http error: ResponseCode: 503, Body: service unavailable
, Header: map[Content-Type:[text/plain; charset=utf-8] X-Content-Type-Options:[nosniff]]
W0509 22:19:38.344706       1 handler_proxy.go:93] no RequestInfo found in the context
E0509 22:19:38.344737       1 controller.go:113] loading OpenAPI spec for "v1beta1.metrics.k8s.io" failed with: Error, could not get list of group versions for APIService
W0509 22:19:38.344749       1 handler_proxy.go:93] no RequestInfo found in the context
I0509 22:19:38.344749       1 controller.go:126] OpenAPI AggregationController: action for item v1beta1.metrics.k8s.io: Rate Limited Requeue.
E0509 22:19:38.344824       1 controller.go:102] loading OpenAPI spec for "v1beta1.metrics.k8s.io" failed with: failed to download v1beta1.metrics.k8s.io: failed to retrieve openAPI spec, http error: ResponseCode: 503, Body: service unavailable
, Header: map[Content-Type:[text/plain; charset=utf-8] X-Content-Type-Options:[nosniff]]
I0509 22:19:38.345926       1 controller.go:109] OpenAPI AggregationController: action for item v1beta1.metrics.k8s.io: Rate Limited Requeue.
I0509 22:19:38.422266       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:19:38.422497       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:19:45.948520       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
W0509 22:20:38.344988       1 handler_proxy.go:93] no RequestInfo found in the context
E0509 22:20:38.345018       1 controller.go:113] loading OpenAPI spec for "v1beta1.metrics.k8s.io" failed with: Error, could not get list of group versions for APIService
I0509 22:20:38.345026       1 controller.go:126] OpenAPI AggregationController: action for item v1beta1.metrics.k8s.io: Rate Limited Requeue.
W0509 22:20:38.346064       1 handler_proxy.go:93] no RequestInfo found in the context
E0509 22:20:38.346125       1 controller.go:102] loading OpenAPI spec for "v1beta1.metrics.k8s.io" failed with: failed to download v1beta1.metrics.k8s.io: failed to retrieve openAPI spec, http error: ResponseCode: 503, Body: service unavailable
, Header: map[Content-Type:[text/plain; charset=utf-8] X-Content-Type-Options:[nosniff]]
I0509 22:20:38.346148       1 controller.go:109] OpenAPI AggregationController: action for item v1beta1.metrics.k8s.io: Rate Limited Requeue.
I0509 22:20:45.948750       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
E0509 22:20:47.716389       1 available_controller.go:460] v1beta1.metrics.k8s.io failed with: failing or missing response from https://10.107.177.154:443/apis/metrics.k8s.io/v1beta1: Get "https://10.107.177.154:443/apis/metrics.k8s.io/v1beta1": dial tcp 10.107.177.154:443: connect: connection refused
W0509 22:20:47.716389       1 handler_proxy.go:93] no RequestInfo found in the context
E0509 22:20:47.716470       1 controller.go:146] Error updating APIService "v1beta1.metrics.k8s.io" with err: failed to download v1beta1.metrics.k8s.io: failed to retrieve openAPI spec, http error: ResponseCode: 503, Body: service unavailable
, Header: map[Content-Type:[text/plain; charset=utf-8] X-Content-Type-Options:[nosniff]]
E0509 22:20:47.716760       1 available_controller.go:460] v1beta1.metrics.k8s.io failed with: failing or missing response from https://10.107.177.154:443/apis/metrics.k8s.io/v1beta1: Get "https://10.107.177.154:443/apis/metrics.k8s.io/v1beta1": dial tcp 10.107.177.154:443: connect: connection refused
I0509 22:20:47.717909       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
W0509 22:20:48.718342       1 handler_proxy.go:93] no RequestInfo found in the context
E0509 22:20:48.718366       1 controller.go:113] loading OpenAPI spec for "v1beta1.metrics.k8s.io" failed with: Error, could not get list of group versions for APIService
I0509 22:20:48.718375       1 controller.go:126] OpenAPI AggregationController: action for item v1beta1.metrics.k8s.io: Rate Limited Requeue.
W0509 22:20:48.718391       1 handler_proxy.go:93] no RequestInfo found in the context
E0509 22:20:48.718431       1 controller.go:102] loading OpenAPI spec for "v1beta1.metrics.k8s.io" failed with: failed to download v1beta1.metrics.k8s.io: failed to retrieve openAPI spec, http error: ResponseCode: 503, Body: service unavailable
, Header: map[Content-Type:[text/plain; charset=utf-8] X-Content-Type-Options:[nosniff]]
I0509 22:20:48.719526       1 controller.go:109] OpenAPI AggregationController: action for item v1beta1.metrics.k8s.io: Rate Limited Requeue.
W0509 22:20:52.726298       1 handler_proxy.go:93] no RequestInfo found in the context
E0509 22:20:52.726327       1 available_controller.go:460] v1beta1.metrics.k8s.io failed with: failing or missing response from https://10.107.177.154:443/apis/metrics.k8s.io/v1beta1: Get "https://10.107.177.154:443/apis/metrics.k8s.io/v1beta1": net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)
E0509 22:20:52.726354       1 controller.go:146] Error updating APIService "v1beta1.metrics.k8s.io" with err: failed to download v1beta1.metrics.k8s.io: failed to retrieve openAPI spec, http error: ResponseCode: 503, Body: service unavailable
, Header: map[Content-Type:[text/plain; charset=utf-8] X-Content-Type-Options:[nosniff]]
I0509 22:20:52.744175       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:20:52.753606       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:21:45.953077       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:22:45.951440       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:23:45.952794       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:23:46.086235       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:24:45.952157       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:25:45.952319       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:26:45.952023       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:27:45.951805       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:28:45.951709       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:28:46.092835       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:29:45.951517       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:30:45.952587       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:31:45.952195       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:32:45.951387       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:33:45.950960       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:33:46.098453       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:34:45.952771       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:35:45.951379       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:36:45.951683       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:37:45.952239       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:38:45.952399       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:38:46.104547       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:39:45.951917       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:40:45.951785       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:41:45.952115       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:42:45.952337       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:43:45.951064       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:43:46.109765       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:44:45.952786       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:45:45.951595       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:46:45.951673       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:47:45.952271       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:48:45.951369       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:48:46.116447       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:49:45.951735       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:50:45.952016       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:51:45.950440       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:52:45.951478       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:53:45.952347       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
I0509 22:53:46.120658       1 handler.go:232] Adding GroupVersion metrics.k8s.io v1beta1 to ResourceManager
==== END logs for container kube-apiserver of pod kube-system/kube-apiserver-minikube ====
==== START logs for container kube-controller-manager of pod kube-system/kube-controller-manager-minikube ====
I0509 20:38:44.960813       1 serving.go:348] Generated self-signed cert in-memory
I0509 20:38:45.349034       1 controllermanager.go:189] "Starting" version="v1.28.3"
I0509 20:38:45.349050       1 controllermanager.go:191] "Golang settings" GOGC="" GOMAXPROCS="" GOTRACEBACK=""
I0509 20:38:45.349787       1 dynamic_cafile_content.go:157] "Starting controller" name="request-header::/var/lib/minikube/certs/front-proxy-ca.crt"
I0509 20:38:45.349801       1 dynamic_cafile_content.go:157] "Starting controller" name="client-ca-bundle::/var/lib/minikube/certs/ca.crt"
I0509 20:38:45.350245       1 secure_serving.go:213] Serving securely on 127.0.0.1:10257
I0509 20:38:45.350344       1 tlsconfig.go:240] "Starting DynamicServingCertificateController"
I0509 20:38:47.968459       1 shared_informer.go:311] Waiting for caches to sync for tokens
I0509 20:38:47.973280       1 controllermanager.go:642] "Started controller" controller="certificatesigningrequest-approving-controller"
I0509 20:38:47.973357       1 certificate_controller.go:115] "Starting certificate controller" name="csrapproving"
I0509 20:38:47.973368       1 shared_informer.go:311] Waiting for caches to sync for certificate-csrapproving
I0509 20:38:47.978203       1 controllermanager.go:642] "Started controller" controller="root-ca-certificate-publisher-controller"
I0509 20:38:47.978261       1 publisher.go:102] "Starting root CA cert publisher controller"
I0509 20:38:47.978269       1 shared_informer.go:311] Waiting for caches to sync for crt configmap
I0509 20:38:47.981589       1 controllermanager.go:642] "Started controller" controller="token-cleaner-controller"
I0509 20:38:47.981649       1 tokencleaner.go:112] "Starting token cleaner controller"
I0509 20:38:47.981657       1 shared_informer.go:311] Waiting for caches to sync for token_cleaner
I0509 20:38:47.981662       1 shared_informer.go:318] Caches are synced for token_cleaner
I0509 20:38:47.984973       1 controllermanager.go:642] "Started controller" controller="endpointslice-controller"
I0509 20:38:47.985077       1 endpointslice_controller.go:264] "Starting endpoint slice controller"
I0509 20:38:47.985081       1 shared_informer.go:311] Waiting for caches to sync for endpoint_slice
I0509 20:38:47.988068       1 controllermanager.go:642] "Started controller" controller="deployment-controller"
I0509 20:38:47.988143       1 deployment_controller.go:168] "Starting controller" controller="deployment"
I0509 20:38:47.988154       1 shared_informer.go:311] Waiting for caches to sync for deployment
I0509 20:38:47.991181       1 controllermanager.go:642] "Started controller" controller="bootstrap-signer-controller"
I0509 20:38:47.991234       1 shared_informer.go:311] Waiting for caches to sync for bootstrap_signer
I0509 20:38:48.007626       1 controllermanager.go:642] "Started controller" controller="namespace-controller"
I0509 20:38:48.007688       1 namespace_controller.go:197] "Starting namespace controller"
I0509 20:38:48.007700       1 shared_informer.go:311] Waiting for caches to sync for namespace
I0509 20:38:48.016583       1 controllermanager.go:642] "Started controller" controller="horizontal-pod-autoscaler-controller"
I0509 20:38:48.016655       1 horizontal.go:200] "Starting HPA controller"
I0509 20:38:48.016672       1 shared_informer.go:311] Waiting for caches to sync for HPA
I0509 20:38:48.018215       1 certificate_controller.go:115] "Starting certificate controller" name="csrsigning-kubelet-serving"
I0509 20:38:48.018226       1 shared_informer.go:311] Waiting for caches to sync for certificate-csrsigning-kubelet-serving
I0509 20:38:48.018246       1 dynamic_serving_content.go:132] "Starting controller" name="csr-controller::/var/lib/minikube/certs/ca.crt::/var/lib/minikube/certs/ca.key"
I0509 20:38:48.018659       1 certificate_controller.go:115] "Starting certificate controller" name="csrsigning-kubelet-client"
I0509 20:38:48.018673       1 shared_informer.go:311] Waiting for caches to sync for certificate-csrsigning-kubelet-client
I0509 20:38:48.018696       1 dynamic_serving_content.go:132] "Starting controller" name="csr-controller::/var/lib/minikube/certs/ca.crt::/var/lib/minikube/certs/ca.key"
I0509 20:38:48.019112       1 certificate_controller.go:115] "Starting certificate controller" name="csrsigning-kube-apiserver-client"
I0509 20:38:48.019119       1 shared_informer.go:311] Waiting for caches to sync for certificate-csrsigning-kube-apiserver-client
I0509 20:38:48.019130       1 dynamic_serving_content.go:132] "Starting controller" name="csr-controller::/var/lib/minikube/certs/ca.crt::/var/lib/minikube/certs/ca.key"
I0509 20:38:48.019564       1 controllermanager.go:642] "Started controller" controller="certificatesigningrequest-signing-controller"
I0509 20:38:48.019629       1 certificate_controller.go:115] "Starting certificate controller" name="csrsigning-legacy-unknown"
I0509 20:38:48.019635       1 shared_informer.go:311] Waiting for caches to sync for certificate-csrsigning-legacy-unknown
I0509 20:38:48.019647       1 dynamic_serving_content.go:132] "Starting controller" name="csr-controller::/var/lib/minikube/certs/ca.crt::/var/lib/minikube/certs/ca.key"
I0509 20:38:48.069167       1 shared_informer.go:318] Caches are synced for tokens
I0509 20:38:48.122274       1 controllermanager.go:642] "Started controller" controller="job-controller"
I0509 20:38:48.122331       1 job_controller.go:226] "Starting job controller"
I0509 20:38:48.122337       1 shared_informer.go:311] Waiting for caches to sync for job
I0509 20:38:48.272430       1 controllermanager.go:642] "Started controller" controller="statefulset-controller"
I0509 20:38:48.272510       1 stateful_set.go:161] "Starting stateful set controller"
I0509 20:38:48.272520       1 shared_informer.go:311] Waiting for caches to sync for stateful set
I0509 20:38:48.321528       1 controllermanager.go:642] "Started controller" controller="certificatesigningrequest-cleaner-controller"
I0509 20:38:48.321604       1 cleaner.go:83] "Starting CSR cleaner controller"
I0509 20:38:48.471666       1 controllermanager.go:642] "Started controller" controller="clusterrole-aggregation-controller"
I0509 20:38:48.471751       1 clusterroleaggregation_controller.go:189] "Starting ClusterRoleAggregator controller"
I0509 20:38:48.471760       1 shared_informer.go:311] Waiting for caches to sync for ClusterRoleAggregator
I0509 20:38:48.621794       1 controllermanager.go:642] "Started controller" controller="persistentvolumeclaim-protection-controller"
I0509 20:38:48.621859       1 pvc_protection_controller.go:102] "Starting PVC protection controller"
I0509 20:38:48.621868       1 shared_informer.go:311] Waiting for caches to sync for PVC protection
I0509 20:38:48.772318       1 controllermanager.go:642] "Started controller" controller="endpointslice-mirroring-controller"
I0509 20:38:48.772419       1 endpointslicemirroring_controller.go:223] "Starting EndpointSliceMirroring controller"
I0509 20:38:48.772430       1 shared_informer.go:311] Waiting for caches to sync for endpoint_slice_mirroring
I0509 20:38:48.922537       1 controllermanager.go:642] "Started controller" controller="replicationcontroller-controller"
I0509 20:38:48.922590       1 replica_set.go:214] "Starting controller" name="replicationcontroller"
I0509 20:38:48.922599       1 shared_informer.go:311] Waiting for caches to sync for ReplicationController
I0509 20:38:49.171527       1 garbagecollector.go:155] "Starting controller" controller="garbagecollector"
I0509 20:38:49.171543       1 shared_informer.go:311] Waiting for caches to sync for garbage collector
I0509 20:38:49.171562       1 graph_builder.go:294] "Running" component="GraphBuilder"
I0509 20:38:49.171608       1 controllermanager.go:642] "Started controller" controller="garbage-collector-controller"
I0509 20:38:49.421289       1 controllermanager.go:642] "Started controller" controller="ephemeral-volume-controller"
I0509 20:38:49.421379       1 controller.go:169] "Starting ephemeral volume controller"
I0509 20:38:49.421398       1 shared_informer.go:311] Waiting for caches to sync for ephemeral
I0509 20:38:49.577463       1 controllermanager.go:642] "Started controller" controller="persistentvolume-expander-controller"
I0509 20:38:49.577502       1 expand_controller.go:328] "Starting expand controller"
I0509 20:38:49.577508       1 shared_informer.go:311] Waiting for caches to sync for expand
I0509 20:38:49.721080       1 controllermanager.go:642] "Started controller" controller="persistentvolume-protection-controller"
I0509 20:38:49.721123       1 pv_protection_controller.go:78] "Starting PV protection controller"
I0509 20:38:49.721129       1 shared_informer.go:311] Waiting for caches to sync for PV protection
I0509 20:38:49.871611       1 controllermanager.go:642] "Started controller" controller="ttl-after-finished-controller"
I0509 20:38:49.871656       1 ttlafterfinished_controller.go:109] "Starting TTL after finished controller"
I0509 20:38:49.871661       1 shared_informer.go:311] Waiting for caches to sync for TTL after finished
I0509 20:38:50.022613       1 controllermanager.go:642] "Started controller" controller="daemonset-controller"
I0509 20:38:50.022709       1 daemon_controller.go:291] "Starting daemon sets controller"
I0509 20:38:50.022718       1 shared_informer.go:311] Waiting for caches to sync for daemon sets
I0509 20:38:50.171875       1 controllermanager.go:642] "Started controller" controller="ttl-controller"
I0509 20:38:50.171927       1 ttl_controller.go:124] "Starting TTL controller"
I0509 20:38:50.171940       1 shared_informer.go:311] Waiting for caches to sync for TTL
E0509 20:38:50.322091       1 core.go:213] "Failed to start cloud node lifecycle controller" err="no cloud provider provided"
I0509 20:38:50.322119       1 controllermanager.go:620] "Warning: skipping controller" controller="cloud-node-lifecycle-controller"
I0509 20:38:50.471002       1 controllermanager.go:642] "Started controller" controller="persistentvolume-attach-detach-controller"
I0509 20:38:50.471058       1 attach_detach_controller.go:337] "Starting attach detach controller"
I0509 20:38:50.471067       1 shared_informer.go:311] Waiting for caches to sync for attach detach
I0509 20:38:50.621863       1 controllermanager.go:642] "Started controller" controller="endpoints-controller"
I0509 20:38:50.622103       1 endpoints_controller.go:174] "Starting endpoint controller"
I0509 20:38:50.622169       1 shared_informer.go:311] Waiting for caches to sync for endpoint
I0509 20:39:00.680741       1 range_allocator.go:111] "No Secondary Service CIDR provided. Skipping filtering out secondary service addresses"
I0509 20:39:00.680778       1 controllermanager.go:642] "Started controller" controller="node-ipam-controller"
I0509 20:39:00.680921       1 node_ipam_controller.go:162] "Starting ipam controller"
I0509 20:39:00.680936       1 shared_informer.go:311] Waiting for caches to sync for node
I0509 20:39:00.686559       1 controllermanager.go:642] "Started controller" controller="persistentvolume-binder-controller"
I0509 20:39:00.686698       1 pv_controller_base.go:319] "Starting persistent volume controller"
I0509 20:39:00.686712       1 shared_informer.go:311] Waiting for caches to sync for persistent volume
I0509 20:39:00.692295       1 controllermanager.go:642] "Started controller" controller="serviceaccount-controller"
I0509 20:39:00.692397       1 serviceaccounts_controller.go:111] "Starting service account controller"
I0509 20:39:00.692403       1 shared_informer.go:311] Waiting for caches to sync for service account
I0509 20:39:00.697675       1 controllermanager.go:642] "Started controller" controller="cronjob-controller"
I0509 20:39:00.697693       1 core.go:228] "Warning: configure-cloud-routes is set, but no cloud provider specified. Will not configure cloud provider routes."
I0509 20:39:00.697703       1 controllermanager.go:620] "Warning: skipping controller" controller="node-route-controller"
I0509 20:39:00.697773       1 cronjob_controllerv2.go:139] "Starting cronjob controller v2"
I0509 20:39:00.697787       1 shared_informer.go:311] Waiting for caches to sync for cronjob
I0509 20:39:00.703800       1 controllermanager.go:642] "Started controller" controller="disruption-controller"
I0509 20:39:00.703823       1 disruption.go:437] "Sending events to api server."
I0509 20:39:00.703840       1 disruption.go:448] "Starting disruption controller"
I0509 20:39:00.703845       1 shared_informer.go:311] Waiting for caches to sync for disruption
I0509 20:39:00.705126       1 node_lifecycle_controller.go:431] "Controller will reconcile labels"
I0509 20:39:00.705183       1 controllermanager.go:642] "Started controller" controller="node-lifecycle-controller"
I0509 20:39:00.705276       1 node_lifecycle_controller.go:465] "Sending events to api server"
I0509 20:39:00.705307       1 node_lifecycle_controller.go:476] "Starting node controller"
I0509 20:39:00.705315       1 shared_informer.go:311] Waiting for caches to sync for taint
E0509 20:39:00.710060       1 core.go:92] "Failed to start service controller" err="WARNING: no cloud provider provided, services of type LoadBalancer will fail"
I0509 20:39:00.710077       1 controllermanager.go:620] "Warning: skipping controller" controller="service-lb-controller"
I0509 20:39:00.714548       1 controllermanager.go:642] "Started controller" controller="pod-garbage-collector-controller"
I0509 20:39:00.714622       1 gc_controller.go:103] "Starting GC controller"
I0509 20:39:00.714634       1 shared_informer.go:311] Waiting for caches to sync for GC
I0509 20:39:00.731242       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="serviceaccounts"
I0509 20:39:00.731358       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="csistoragecapacities.storage.k8s.io"
I0509 20:39:00.731381       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="endpointslices.discovery.k8s.io"
I0509 20:39:00.731403       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="podtemplates"
I0509 20:39:00.731433       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="daemonsets.apps"
I0509 20:39:00.731456       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="cronjobs.batch"
I0509 20:39:00.731476       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="poddisruptionbudgets.policy"
I0509 20:39:00.731493       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="leases.coordination.k8s.io"
I0509 20:39:00.731532       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="networkpolicies.networking.k8s.io"
I0509 20:39:00.731560       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="limitranges"
I0509 20:39:00.731576       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="statefulsets.apps"
I0509 20:39:00.731595       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="controllerrevisions.apps"
I0509 20:39:00.731617       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="jobs.batch"
I0509 20:39:00.731657       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="replicasets.apps"
I0509 20:39:00.731678       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="roles.rbac.authorization.k8s.io"
I0509 20:39:00.731708       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="endpoints"
I0509 20:39:00.731740       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="horizontalpodautoscalers.autoscaling"
I0509 20:39:00.731758       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="deployments.apps"
I0509 20:39:00.731788       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="ingresses.networking.k8s.io"
I0509 20:39:00.731809       1 resource_quota_monitor.go:224] "QuotaMonitor created object count evaluator" resource="rolebindings.rbac.authorization.k8s.io"
I0509 20:39:00.731829       1 controllermanager.go:642] "Started controller" controller="resourcequota-controller"
I0509 20:39:00.731846       1 resource_quota_controller.go:294] "Starting resource quota controller"
I0509 20:39:00.731859       1 shared_informer.go:311] Waiting for caches to sync for resource quota
I0509 20:39:00.731876       1 resource_quota_monitor.go:305] "QuotaMonitor running"
I0509 20:39:00.738376       1 controllermanager.go:642] "Started controller" controller="replicaset-controller"
I0509 20:39:00.738448       1 replica_set.go:214] "Starting controller" name="replicaset"
I0509 20:39:00.738461       1 shared_informer.go:311] Waiting for caches to sync for ReplicaSet
I0509 20:39:00.744053       1 shared_informer.go:311] Waiting for caches to sync for resource quota
I0509 20:39:00.750829       1 shared_informer.go:311] Waiting for caches to sync for garbage collector
I0509 20:39:00.772260       1 shared_informer.go:318] Caches are synced for ClusterRoleAggregator
I0509 20:39:00.772286       1 shared_informer.go:318] Caches are synced for TTL after finished
I0509 20:39:00.772460       1 shared_informer.go:318] Caches are synced for endpoint_slice_mirroring
I0509 20:39:00.772544       1 shared_informer.go:318] Caches are synced for stateful set
I0509 20:39:00.773465       1 shared_informer.go:318] Caches are synced for certificate-csrapproving
I0509 20:39:00.777788       1 shared_informer.go:318] Caches are synced for expand
I0509 20:39:00.778948       1 shared_informer.go:318] Caches are synced for crt configmap
I0509 20:39:00.788545       1 shared_informer.go:318] Caches are synced for deployment
I0509 20:39:00.791722       1 shared_informer.go:318] Caches are synced for bootstrap_signer
I0509 20:39:00.792806       1 shared_informer.go:318] Caches are synced for service account
I0509 20:39:00.798793       1 shared_informer.go:318] Caches are synced for cronjob
I0509 20:39:00.803913       1 shared_informer.go:318] Caches are synced for disruption
I0509 20:39:00.808254       1 shared_informer.go:318] Caches are synced for namespace
I0509 20:39:00.817592       1 shared_informer.go:318] Caches are synced for HPA
I0509 20:39:00.818738       1 shared_informer.go:318] Caches are synced for certificate-csrsigning-kubelet-client
I0509 20:39:00.818768       1 shared_informer.go:318] Caches are synced for certificate-csrsigning-kubelet-serving
I0509 20:39:00.819883       1 shared_informer.go:318] Caches are synced for certificate-csrsigning-legacy-unknown
I0509 20:39:00.819895       1 shared_informer.go:318] Caches are synced for certificate-csrsigning-kube-apiserver-client
I0509 20:39:00.822077       1 shared_informer.go:318] Caches are synced for PVC protection
I0509 20:39:00.822099       1 shared_informer.go:318] Caches are synced for ephemeral
I0509 20:39:00.822111       1 shared_informer.go:318] Caches are synced for PV protection
I0509 20:39:00.823190       1 shared_informer.go:318] Caches are synced for ReplicationController
I0509 20:39:00.823227       1 shared_informer.go:318] Caches are synced for endpoint
I0509 20:39:00.823270       1 shared_informer.go:318] Caches are synced for job
I0509 20:39:00.838964       1 shared_informer.go:318] Caches are synced for ReplicaSet
I0509 20:39:00.932550       1 shared_informer.go:318] Caches are synced for resource quota
I0509 20:39:00.944143       1 shared_informer.go:318] Caches are synced for resource quota
I0509 20:39:00.944194       1 actual_state_of_world.go:547] "Failed to update statusUpdateNeeded field in actual state of world" err="Failed to set statusUpdateNeeded to needed true, because nodeName=\"minikube\" does not exist"
I0509 20:39:00.971600       1 shared_informer.go:318] Caches are synced for attach detach
I0509 20:39:00.972755       1 shared_informer.go:318] Caches are synced for TTL
I0509 20:39:00.981375       1 shared_informer.go:318] Caches are synced for node
I0509 20:39:00.981442       1 range_allocator.go:174] "Sending events to api server"
I0509 20:39:00.981468       1 range_allocator.go:178] "Starting range CIDR allocator"
I0509 20:39:00.981475       1 shared_informer.go:311] Waiting for caches to sync for cidrallocator
I0509 20:39:00.981481       1 shared_informer.go:318] Caches are synced for cidrallocator
I0509 20:39:00.985713       1 shared_informer.go:318] Caches are synced for endpoint_slice
I0509 20:39:00.985879       1 range_allocator.go:380] "Set node PodCIDR" node="minikube" podCIDRs=["10.244.0.0/24"]
I0509 20:39:00.986902       1 shared_informer.go:318] Caches are synced for persistent volume
I0509 20:39:01.005560       1 shared_informer.go:318] Caches are synced for taint
I0509 20:39:01.005602       1 node_lifecycle_controller.go:1225] "Initializing eviction metric for zone" zone=""
I0509 20:39:01.005656       1 node_lifecycle_controller.go:877] "Missing timestamp for Node. Assuming now as a timestamp" node="minikube"
I0509 20:39:01.005687       1 node_lifecycle_controller.go:1071] "Controller detected that zone is now in new state" zone="" newState="Normal"
I0509 20:39:01.005721       1 taint_manager.go:206] "Starting NoExecuteTaintManager"
I0509 20:39:01.005736       1 event.go:307] "Event occurred" object="minikube" fieldPath="" kind="Node" apiVersion="v1" type="Normal" reason="RegisteredNode" message="Node minikube event: Registered Node minikube in Controller"
I0509 20:39:01.005754       1 taint_manager.go:211] "Sending events to api server"
I0509 20:39:01.014683       1 shared_informer.go:318] Caches are synced for GC
I0509 20:39:01.022904       1 shared_informer.go:318] Caches are synced for daemon sets
I0509 20:39:01.279991       1 event.go:307] "Event occurred" object="kube-system/coredns" fieldPath="" kind="Deployment" apiVersion="apps/v1" type="Normal" reason="ScalingReplicaSet" message="Scaled up replica set coredns-5dd5756b68 to 1"
I0509 20:39:01.352181       1 shared_informer.go:318] Caches are synced for garbage collector
I0509 20:39:01.372341       1 shared_informer.go:318] Caches are synced for garbage collector
I0509 20:39:01.372358       1 garbagecollector.go:166] "All resource monitors have synced. Proceeding to collect garbage"
I0509 20:39:01.783220       1 event.go:307] "Event occurred" object="kube-system/kube-proxy" fieldPath="" kind="DaemonSet" apiVersion="apps/v1" type="Normal" reason="SuccessfulCreate" message="Created pod: kube-proxy-lmswp"
I0509 20:39:01.829110       1 event.go:307] "Event occurred" object="kube-system/coredns-5dd5756b68" fieldPath="" kind="ReplicaSet" apiVersion="apps/v1" type="Normal" reason="SuccessfulCreate" message="Created pod: coredns-5dd5756b68-b2lqb"
I0509 20:39:01.832697       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/coredns-5dd5756b68" duration="552.450222ms"
I0509 20:39:01.836646       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/coredns-5dd5756b68" duration="3.892585ms"
I0509 20:39:01.836713       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/coredns-5dd5756b68" duration="41.48µs"
I0509 20:39:01.838708       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/coredns-5dd5756b68" duration="67.16µs"
I0509 20:39:03.096590       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/coredns-5dd5756b68" duration="5.261467ms"
I0509 20:39:03.096662       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/coredns-5dd5756b68" duration="45.88µs"
I0509 22:19:37.366991       1 event.go:307] "Event occurred" object="kube-system/metrics-server" fieldPath="" kind="Deployment" apiVersion="apps/v1" type="Normal" reason="ScalingReplicaSet" message="Scaled up replica set metrics-server-7c66d45ddc to 1"
I0509 22:19:37.380200       1 event.go:307] "Event occurred" object="kube-system/metrics-server-7c66d45ddc" fieldPath="" kind="ReplicaSet" apiVersion="apps/v1" type="Normal" reason="SuccessfulCreate" message="Created pod: metrics-server-7c66d45ddc-d69gs"
I0509 22:19:37.383933       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/metrics-server-7c66d45ddc" duration="17.248777ms"
I0509 22:19:37.393563       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/metrics-server-7c66d45ddc" duration="9.58049ms"
I0509 22:19:37.393648       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/metrics-server-7c66d45ddc" duration="51.35µs"
I0509 22:19:37.394301       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/metrics-server-7c66d45ddc" duration="51.9µs"
I0509 22:19:41.265057       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/metrics-server-7c66d45ddc" duration="91.491µs"
E0509 22:20:01.751672       1 resource_quota_controller.go:440] unable to retrieve the complete list of server APIs: metrics.k8s.io/v1beta1: stale GroupVersion discovery: metrics.k8s.io/v1beta1
I0509 22:20:02.172176       1 garbagecollector.go:816] "failed to discover some groups" groups="<internal error: json: unsupported type: map[schema.GroupVersion]error>"
E0509 22:20:31.755181       1 resource_quota_controller.go:440] unable to retrieve the complete list of server APIs: metrics.k8s.io/v1beta1: stale GroupVersion discovery: metrics.k8s.io/v1beta1
I0509 22:20:32.179995       1 garbagecollector.go:816] "failed to discover some groups" groups="<internal error: json: unsupported type: map[schema.GroupVersion]error>"
I0509 22:20:47.713797       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/metrics-server-7c66d45ddc" duration="5.235611ms"
I0509 22:20:47.713969       1 replica_set.go:676] "Finished syncing" kind="ReplicaSet" key="kube-system/metrics-server-7c66d45ddc" duration="80.22µs"
I0509 22:38:48.322814       1 cleaner.go:175] "Cleaning CSR as it is more than approvedExpiration duration old and approved." csr="csr-7wlg5" approvedExpiration="1h0m0s"
==== END logs for container kube-controller-manager of pod kube-system/kube-controller-manager-minikube ====
==== START logs for container kube-proxy of pod kube-system/kube-proxy-lmswp ====
I0509 20:39:02.305801       1 server_others.go:69] "Using iptables proxy"
I0509 20:39:02.312466       1 node.go:141] Successfully retrieved node IP: 192.168.49.2
I0509 20:39:02.327369       1 server.go:632] "kube-proxy running in dual-stack mode" primary ipFamily="IPv4"
I0509 20:39:02.329198       1 server_others.go:152] "Using iptables Proxier"
I0509 20:39:02.329211       1 server_others.go:421] "Detect-local-mode set to ClusterCIDR, but no cluster CIDR for family" ipFamily="IPv6"
I0509 20:39:02.329216       1 server_others.go:438] "Defaulting to no-op detect-local"
I0509 20:39:02.329243       1 proxier.go:251] "Setting route_localnet=1 to allow node-ports on localhost; to change this either disable iptables.localhostNodePorts (--iptables-localhost-nodeports) or set nodePortAddresses (--nodeport-addresses) to filter loopback addresses"
I0509 20:39:02.329409       1 server.go:846] "Version info" version="v1.28.3"
I0509 20:39:02.329416       1 server.go:848] "Golang settings" GOGC="" GOMAXPROCS="" GOTRACEBACK=""
I0509 20:39:02.329815       1 config.go:315] "Starting node config controller"
I0509 20:39:02.329838       1 shared_informer.go:311] Waiting for caches to sync for node config
I0509 20:39:02.329905       1 config.go:97] "Starting endpoint slice config controller"
I0509 20:39:02.329939       1 shared_informer.go:311] Waiting for caches to sync for endpoint slice config
I0509 20:39:02.329966       1 config.go:188] "Starting service config controller"
I0509 20:39:02.329993       1 shared_informer.go:311] Waiting for caches to sync for service config
I0509 20:39:02.430780       1 shared_informer.go:318] Caches are synced for node config
I0509 20:39:02.430852       1 shared_informer.go:318] Caches are synced for endpoint slice config
I0509 20:39:02.430870       1 shared_informer.go:318] Caches are synced for service config
==== END logs for container kube-proxy of pod kube-system/kube-proxy-lmswp ====
==== START logs for container kube-scheduler of pod kube-system/kube-scheduler-minikube ====
I0509 20:38:45.197705       1 serving.go:348] Generated self-signed cert in-memory
W0509 20:38:45.960864       1 requestheader_controller.go:193] Unable to get configmap/extension-apiserver-authentication in kube-system.  Usually fixed by 'kubectl create rolebinding -n kube-system ROLEBINDING_NAME --role=extension-apiserver-authentication-reader --serviceaccount=YOUR_NS:YOUR_SA'
W0509 20:38:45.960929       1 authentication.go:368] Error looking up in-cluster authentication configuration: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot get resource "configmaps" in API group "" in the namespace "kube-system"
W0509 20:38:45.960954       1 authentication.go:369] Continuing without authentication configuration. This may treat all requests as anonymous.
W0509 20:38:45.960975       1 authentication.go:370] To require authentication configuration lookup to succeed, set --authentication-tolerate-lookup-failure=false
I0509 20:38:46.015646       1 server.go:154] "Starting Kubernetes Scheduler" version="v1.28.3"
I0509 20:38:46.015662       1 server.go:156] "Golang settings" GOGC="" GOMAXPROCS="" GOTRACEBACK=""
I0509 20:38:46.016430       1 configmap_cafile_content.go:202] "Starting controller" name="client-ca::kube-system::extension-apiserver-authentication::client-ca-file"
I0509 20:38:46.016441       1 shared_informer.go:311] Waiting for caches to sync for client-ca::kube-system::extension-apiserver-authentication::client-ca-file
I0509 20:38:46.016958       1 secure_serving.go:213] Serving securely on 127.0.0.1:10259
I0509 20:38:46.016999       1 tlsconfig.go:240] "Starting DynamicServingCertificateController"
W0509 20:38:46.018345       1 reflector.go:535] pkg/server/dynamiccertificates/configmap_cafile_content.go:206: failed to list *v1.ConfigMap: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot list resource "configmaps" in API group "" in the namespace "kube-system"
E0509 20:38:46.018571       1 reflector.go:147] pkg/server/dynamiccertificates/configmap_cafile_content.go:206: Failed to watch *v1.ConfigMap: failed to list *v1.ConfigMap: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot list resource "configmaps" in API group "" in the namespace "kube-system"
W0509 20:38:46.019297       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
W0509 20:38:46.019299       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.CSIDriver: csidrivers.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csidrivers" in API group "storage.k8s.io" at the cluster scope
E0509 20:38:46.019314       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.Service: failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
E0509 20:38:46.019317       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.CSIDriver: failed to list *v1.CSIDriver: csidrivers.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csidrivers" in API group "storage.k8s.io" at the cluster scope
W0509 20:38:46.019394       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
E0509 20:38:46.019408       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.StorageClass: failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
W0509 20:38:46.019417       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.CSIStorageCapacity: csistoragecapacities.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csistoragecapacities" in API group "storage.k8s.io" at the cluster scope
W0509 20:38:46.019394       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.CSINode: csinodes.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csinodes" in API group "storage.k8s.io" at the cluster scope
W0509 20:38:46.019438       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
E0509 20:38:46.019439       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.CSIStorageCapacity: failed to list *v1.CSIStorageCapacity: csistoragecapacities.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csistoragecapacities" in API group "storage.k8s.io" at the cluster scope
E0509 20:38:46.019448       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.Node: failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
W0509 20:38:46.019488       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.Namespace: namespaces is forbidden: User "system:kube-scheduler" cannot list resource "namespaces" in API group "" at the cluster scope
E0509 20:38:46.019501       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.Namespace: failed to list *v1.Namespace: namespaces is forbidden: User "system:kube-scheduler" cannot list resource "namespaces" in API group "" at the cluster scope
E0509 20:38:46.019439       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.CSINode: failed to list *v1.CSINode: csinodes.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csinodes" in API group "storage.k8s.io" at the cluster scope
W0509 20:38:46.019540       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
W0509 20:38:46.019600       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
E0509 20:38:46.019608       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.StatefulSet: failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
E0509 20:38:46.019636       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.PodDisruptionBudget: failed to list *v1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
W0509 20:38:46.019584       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.ReplicaSet: replicasets.apps is forbidden: User "system:kube-scheduler" cannot list resource "replicasets" in API group "apps" at the cluster scope
E0509 20:38:46.019720       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.ReplicaSet: failed to list *v1.ReplicaSet: replicasets.apps is forbidden: User "system:kube-scheduler" cannot list resource "replicasets" in API group "apps" at the cluster scope
W0509 20:38:46.019659       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
E0509 20:38:46.019734       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.Pod: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
W0509 20:38:46.019667       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
E0509 20:38:46.019747       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.PersistentVolume: failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
W0509 20:38:46.019705       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
E0509 20:38:46.019772       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.PersistentVolumeClaim: failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
W0509 20:38:46.019746       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.ReplicationController: replicationcontrollers is forbidden: User "system:kube-scheduler" cannot list resource "replicationcontrollers" in API group "" at the cluster scope
E0509 20:38:46.019789       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.ReplicationController: failed to list *v1.ReplicationController: replicationcontrollers is forbidden: User "system:kube-scheduler" cannot list resource "replicationcontrollers" in API group "" at the cluster scope
W0509 20:38:46.844792       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.CSIDriver: csidrivers.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csidrivers" in API group "storage.k8s.io" at the cluster scope
E0509 20:38:46.844812       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.CSIDriver: failed to list *v1.CSIDriver: csidrivers.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csidrivers" in API group "storage.k8s.io" at the cluster scope
W0509 20:38:46.864720       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
E0509 20:38:46.864736       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.PodDisruptionBudget: failed to list *v1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
W0509 20:38:46.868568       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
E0509 20:38:46.868619       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.Pod: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
W0509 20:38:46.898483       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.CSIStorageCapacity: csistoragecapacities.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csistoragecapacities" in API group "storage.k8s.io" at the cluster scope
E0509 20:38:46.898507       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.CSIStorageCapacity: failed to list *v1.CSIStorageCapacity: csistoragecapacities.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csistoragecapacities" in API group "storage.k8s.io" at the cluster scope
W0509 20:38:46.905189       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
E0509 20:38:46.905203       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.Service: failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
W0509 20:38:46.963666       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
E0509 20:38:46.963689       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.StorageClass: failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
W0509 20:38:46.987730       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.ReplicationController: replicationcontrollers is forbidden: User "system:kube-scheduler" cannot list resource "replicationcontrollers" in API group "" at the cluster scope
E0509 20:38:46.987768       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.ReplicationController: failed to list *v1.ReplicationController: replicationcontrollers is forbidden: User "system:kube-scheduler" cannot list resource "replicationcontrollers" in API group "" at the cluster scope
W0509 20:38:47.105201       1 reflector.go:535] vendor/k8s.io/client-go/informers/factory.go:150: failed to list *v1.Namespace: namespaces is forbidden: User "system:kube-scheduler" cannot list resource "namespaces" in API group "" at the cluster scope
E0509 20:38:47.105237       1 reflector.go:147] vendor/k8s.io/client-go/informers/factory.go:150: Failed to watch *v1.Namespace: failed to list *v1.Namespace: namespaces is forbidden: User "system:kube-scheduler" cannot list resource "namespaces" in API group "" at the cluster scope
I0509 20:38:47.516703       1 shared_informer.go:318] Caches are synced for client-ca::kube-system::extension-apiserver-authentication::client-ca-file
==== END logs for container kube-scheduler of pod kube-system/kube-scheduler-minikube ====
==== START logs for container metrics-server of pod kube-system/metrics-server-7c66d45ddc-d69gs ====
I0509 22:19:41.600340       1 serving.go:342] Generated self-signed cert (/tmp/apiserver.crt, /tmp/apiserver.key)
I0509 22:19:42.149142       1 requestheader_controller.go:169] Starting RequestHeaderAuthRequestController
I0509 22:19:42.149157       1 configmap_cafile_content.go:201] "Starting controller" name="client-ca::kube-system::extension-apiserver-authentication::client-ca-file"
I0509 22:19:42.149180       1 shared_informer.go:240] Waiting for caches to sync for client-ca::kube-system::extension-apiserver-authentication::client-ca-file
I0509 22:19:42.149165       1 shared_informer.go:240] Waiting for caches to sync for RequestHeaderAuthRequestController
I0509 22:19:42.149163       1 configmap_cafile_content.go:201] "Starting controller" name="client-ca::kube-system::extension-apiserver-authentication::requestheader-client-ca-file"
I0509 22:19:42.149253       1 shared_informer.go:240] Waiting for caches to sync for client-ca::kube-system::extension-apiserver-authentication::requestheader-client-ca-file
I0509 22:19:42.149558       1 dynamic_serving_content.go:131] "Starting controller" name="serving-cert::/tmp/apiserver.crt::/tmp/apiserver.key"
I0509 22:19:42.149657       1 secure_serving.go:267] Serving securely on [::]:4443
I0509 22:19:42.149949       1 tlsconfig.go:240] "Starting DynamicServingCertificateController"
W0509 22:19:42.150102       1 shared_informer.go:372] The sharedIndexInformer has started, run more than once is not allowed
I0509 22:19:42.249901       1 shared_informer.go:247] Caches are synced for RequestHeaderAuthRequestController 
I0509 22:19:42.249928       1 shared_informer.go:247] Caches are synced for client-ca::kube-system::extension-apiserver-authentication::requestheader-client-ca-file 
I0509 22:19:42.249923       1 shared_informer.go:247] Caches are synced for client-ca::kube-system::extension-apiserver-authentication::client-ca-file 
I0509 22:19:42.263703       1 server.go:187] "Failed probe" probe="metric-storage-ready" err="no metrics to serve"
I0509 22:19:47.698012       1 server.go:187] "Failed probe" probe="metric-storage-ready" err="no metrics to serve"
I0509 22:19:57.700057       1 server.go:187] "Failed probe" probe="metric-storage-ready" err="no metrics to serve"
I0509 22:20:07.697353       1 server.go:187] "Failed probe" probe="metric-storage-ready" err="no metrics to serve"
I0509 22:20:17.697432       1 server.go:187] "Failed probe" probe="metric-storage-ready" err="no metrics to serve"
I0509 22:20:27.698060       1 server.go:187] "Failed probe" probe="metric-storage-ready" err="no metrics to serve"
I0509 22:20:37.699381       1 server.go:187] "Failed probe" probe="metric-storage-ready" err="no metrics to serve"
==== END logs for container metrics-server of pod kube-system/metrics-server-7c66d45ddc-d69gs ====
==== START logs for container storage-provisioner of pod kube-system/storage-provisioner ====
I0509 20:39:33.281073       1 storage_provisioner.go:116] Initializing the minikube storage provisioner...
I0509 20:39:33.286821       1 storage_provisioner.go:141] Storage provisioner initialized, now starting service!
I0509 20:39:33.286849       1 leaderelection.go:243] attempting to acquire leader lease kube-system/k8s.io-minikube-hostpath...
I0509 20:39:33.290955       1 leaderelection.go:253] successfully acquired lease kube-system/k8s.io-minikube-hostpath
I0509 20:39:33.290993       1 event.go:282] Event(v1.ObjectReference{Kind:"Endpoints", Namespace:"kube-system", Name:"k8s.io-minikube-hostpath", UID:"b299f4ee-de20-448a-9ff3-4de50fb7d126", APIVersion:"v1", ResourceVersion:"417", FieldPath:""}): type: 'Normal' reason: 'LeaderElection' minikube_0ad4fc8b-07da-4e39-b4c5-d5fb288666eb became leader
I0509 20:39:33.291051       1 controller.go:835] Starting provisioner controller k8s.io/minikube-hostpath_minikube_0ad4fc8b-07da-4e39-b4c5-d5fb288666eb!
I0509 20:39:33.391713       1 controller.go:884] Started provisioner controller k8s.io/minikube-hostpath_minikube_0ad4fc8b-07da-4e39-b4c5-d5fb288666eb!
==== END logs for container storage-provisioner of pod kube-system/storage-provisioner ====
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "6985"
    },
    "items": []
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "6985"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "6985"
    },
    "items": [
        {
            "metadata": {
                "name": "kubernetes",
                "namespace": "default",
                "uid": "55a7d20a-43e8-44dd-80e1-d689846e7d2f",
                "resourceVersion": "232",
                "creationTimestamp": "2024-05-09T20:38:47Z",
                "labels": {
                    "component": "apiserver",
                    "provider": "kubernetes"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "https",
                        "protocol": "TCP",
                        "port": 443,
                        "targetPort": 8443
                    }
                ],
                "clusterIP": "10.96.0.1",
                "clusterIPs": [
                    "10.96.0.1"
                ],
                "type": "ClusterIP",
                "sessionAffinity": "None",
                "ipFamilies": [
                    "IPv4"
                ],
                "ipFamilyPolicy": "SingleStack",
                "internalTrafficPolicy": "Cluster"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "6985"
    },
    "items": []
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "6985"
    },
    "items": []
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "6985"
    },
    "items": []
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "6985"
    },
    "items": []
}
